// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Data/Quests/QuestCondition.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data.Quests {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/Quests/QuestCondition.proto</summary>
  public static partial class QuestConditionReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/Quests/QuestCondition.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuestConditionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitQT0dPUHJvdG9zL0RhdGEvUXVlc3RzL1F1ZXN0Q29uZGl0aW9uLnByb3Rv",
            "EhZQT0dPUHJvdG9zLkRhdGEuUXVlc3RzGiNQT0dPUHJvdG9zL0VudW1zL0Fj",
            "dGl2aXR5VHlwZS5wcm90bxogUE9HT1Byb3Rvcy9FbnVtcy9CYWRnZVR5cGUu",
            "cHJvdG8aIFBPR09Qcm90b3MvRW51bXMvUG9rZW1vbklkLnByb3RvGiJQT0dP",
            "UHJvdG9zL0VudW1zL1Bva2Vtb25UeXBlLnByb3RvGiBQT0dPUHJvdG9zL0Vu",
            "dW1zL1JhaWRMZXZlbC5wcm90bxomUE9HT1Byb3Rvcy9JbnZlbnRvcnkvSXRl",
            "bS9JdGVtSWQucHJvdG8isxYKDlF1ZXN0Q29uZGl0aW9uEkIKBHR5cGUYASAB",
            "KA4yNC5QT0dPUHJvdG9zLkRhdGEuUXVlc3RzLlF1ZXN0Q29uZGl0aW9uLkNv",
            "bmRpdGlvblR5cGUSUQoRd2l0aF9wb2tlbW9uX3R5cGUYAiABKAsyNi5QT0dP",
            "UHJvdG9zLkRhdGEuUXVlc3RzLlF1ZXN0Q29uZGl0aW9uLldpdGhQb2tlbW9u",
            "VHlwZRJZChV3aXRoX3Bva2Vtb25fY2F0ZWdvcnkYAyABKAsyOi5QT0dPUHJv",
            "dG9zLkRhdGEuUXVlc3RzLlF1ZXN0Q29uZGl0aW9uLldpdGhQb2tlbW9uQ2F0",
            "ZWdvcnkSUwoSd2l0aF93ZWF0aGVyX2Jvb3N0GAQgASgLMjcuUE9HT1Byb3Rv",
            "cy5EYXRhLlF1ZXN0cy5RdWVzdENvbmRpdGlvbi5XaXRoV2VhdGhlckJvb3N0",
            "El4KGHdpdGhfZGFpbHlfY2FwdHVyZV9ib251cxgFIAEoCzI8LlBPR09Qcm90",
            "b3MuRGF0YS5RdWVzdHMuUXVlc3RDb25kaXRpb24uV2l0aERhaWx5Q2FwdHVy",
            "ZUJvbnVzElgKFXdpdGhfZGFpbHlfc3Bpbl9ib251cxgGIAEoCzI5LlBPR09Q",
            "cm90b3MuRGF0YS5RdWVzdHMuUXVlc3RDb25kaXRpb24uV2l0aERhaWx5U3Bp",
            "bkJvbnVzElYKFHdpdGhfd2luX3JhaWRfc3RhdHVzGAcgASgLMjguUE9HT1By",
            "b3Rvcy5EYXRhLlF1ZXN0cy5RdWVzdENvbmRpdGlvbi5XaXRoV2luUmFpZFN0",
            "YXR1cxJNCg93aXRoX3JhaWRfbGV2ZWwYCCABKAsyNC5QT0dPUHJvdG9zLkRh",
            "dGEuUXVlc3RzLlF1ZXN0Q29uZGl0aW9uLldpdGhSYWlkTGV2ZWwSTQoPd2l0",
            "aF90aHJvd190eXBlGAkgASgLMjQuUE9HT1Byb3Rvcy5EYXRhLlF1ZXN0cy5R",
            "dWVzdENvbmRpdGlvbi5XaXRoVGhyb3dUeXBlEmEKGndpdGhfd2luX2d5bV9i",
            "YXR0bGVfc3RhdHVzGAogASgLMj0uUE9HT1Byb3Rvcy5EYXRhLlF1ZXN0cy5R",
            "dWVzdENvbmRpdGlvbi5XaXRoV2luR3ltQmF0dGxlU3RhdHVzEm0KIHdpdGhf",
            "c3VwZXJfZWZmZWN0aXZlX2NoYXJnZV9tb3ZlGAsgASgLMkMuUE9HT1Byb3Rv",
            "cy5EYXRhLlF1ZXN0cy5RdWVzdENvbmRpdGlvbi5XaXRoU3VwZXJFZmZlY3Rp",
            "dmVDaGFyZ2VNb3ZlEkIKCXdpdGhfaXRlbRgMIAEoCzIvLlBPR09Qcm90b3Mu",
            "RGF0YS5RdWVzdHMuUXVlc3RDb25kaXRpb24uV2l0aEl0ZW0SVwoUd2l0aF91",
            "bmlxdWVfcG9rZXN0b3AYDSABKAsyOS5QT0dPUHJvdG9zLkRhdGEuUXVlc3Rz",
            "LlF1ZXN0Q29uZGl0aW9uLldpdGhVbmlxdWVQb2tlc3RvcBJTChJ3aXRoX3F1",
            "ZXN0X2NvbnRleHQYDiABKAsyNy5QT0dPUHJvdG9zLkRhdGEuUXVlc3RzLlF1",
            "ZXN0Q29uZGl0aW9uLldpdGhRdWVzdENvbnRleHQSTQoPd2l0aF9iYWRnZV90",
            "eXBlGA8gASgLMjQuUE9HT1Byb3Rvcy5EYXRhLlF1ZXN0cy5RdWVzdENvbmRp",
            "dGlvbi5XaXRoQmFkZ2VUeXBlElEKEXdpdGhfcGxheWVyX2xldmVsGBAgASgL",
            "MjYuUE9HT1Byb3Rvcy5EYXRhLlF1ZXN0cy5RdWVzdENvbmRpdGlvbi5XaXRo",
            "UGxheWVyTGV2ZWwSWgoWd2l0aF93aW5fYmF0dGxlX3N0YXR1cxgRIAEoCzI6",
            "LlBPR09Qcm90b3MuRGF0YS5RdWVzdHMuUXVlc3RDb25kaXRpb24uV2l0aFdp",
            "bkJhdHRsZVN0YXR1cxpGCg9XaXRoUG9rZW1vblR5cGUSMwoMcG9rZW1vbl90",
            "eXBlGAEgAygOMh0uUE9HT1Byb3Rvcy5FbnVtcy5Qb2tlbW9uVHlwZRoSChBX",
            "aXRoV2VhdGhlckJvb3N0Gl4KE1dpdGhQb2tlbW9uQ2F0ZWdvcnkSFQoNY2F0",
            "ZWdvcnlfbmFtZRgBIAEoCRIwCgtwb2tlbW9uX2lkcxgCIAMoDjIbLlBPR09Q",
            "cm90b3MuRW51bXMuUG9rZW1vbklkGhcKFVdpdGhEYWlseUNhcHR1cmVCb251",
            "cxoUChJXaXRoRGFpbHlTcGluQm9udXMaEwoRV2l0aFdpblJhaWRTdGF0dXMa",
            "QAoNV2l0aFJhaWRMZXZlbBIvCgpyYWlkX2xldmVsGAEgAygOMhsuUE9HT1By",
            "b3Rvcy5FbnVtcy5SYWlkTGV2ZWwaUAoNV2l0aFRocm93VHlwZRIyCgp0aHJv",
            "d190eXBlGAEgASgOMh4uUE9HT1Byb3Rvcy5FbnVtcy5BY3Rpdml0eVR5cGUS",
            "CwoDaGl0GAIgASgIGg8KDVdpdGhDdXJ2ZUJhbGwaGAoWV2l0aFdpbkd5bUJh",
            "dHRsZVN0YXR1cxoeChxXaXRoU3VwZXJFZmZlY3RpdmVDaGFyZ2VNb3ZlGjsK",
            "CFdpdGhJdGVtEi8KBGl0ZW0YASABKA4yIS5QT0dPUHJvdG9zLkludmVudG9y",
            "eS5JdGVtLkl0ZW1JZBoUChJXaXRoVW5pcXVlUG9rZXN0b3AaoAEKEFdpdGhR",
            "dWVzdENvbnRleHQSUAoHY29udGV4dBgBIAEoDjI/LlBPR09Qcm90b3MuRGF0",
            "YS5RdWVzdHMuUXVlc3RDb25kaXRpb24uV2l0aFF1ZXN0Q29udGV4dC5Db250",
            "ZXh0IjoKB0NvbnRleHQSCQoFVU5TRVQQABIPCgtTVE9SWV9RVUVTVBABEhMK",
            "D0NIQUxMRU5HRV9RVUVTVBACGmQKDVdpdGhCYWRnZVR5cGUSLwoKYmFkZ2Vf",
            "dHlwZRgBIAMoDjIbLlBPR09Qcm90b3MuRW51bXMuQmFkZ2VUeXBlEhIKCmJh",
            "ZGdlX3JhbmsYAiABKAUSDgoGYW1vdW50GAMgASgFGiAKD1dpdGhQbGF5ZXJM",
            "ZXZlbBINCgVsZXZlbBgBIAEoBRoVChNXaXRoV2luQmF0dGxlU3RhdHVzIvMD",
            "Cg1Db25kaXRpb25UeXBlEgkKBVVOU0VUEAASFQoRV0lUSF9QT0tFTU9OX1RZ",
            "UEUQARIZChVXSVRIX1BPS0VNT05fQ0FURUdPUlkQAhIWChJXSVRIX1dFQVRI",
            "RVJfQk9PU1QQAxIcChhXSVRIX0RBSUxZX0NBUFRVUkVfQk9OVVMQBBIZChVX",
            "SVRIX0RBSUxZX1NQSU5fQk9OVVMQBRIYChRXSVRIX1dJTl9SQUlEX1NUQVRV",
            "UxAGEhMKD1dJVEhfUkFJRF9MRVZFTBAHEhMKD1dJVEhfVEhST1dfVFlQRRAI",
            "Eh4KGldJVEhfV0lOX0dZTV9CQVRUTEVfU1RBVFVTEAkSHwobV0lUSF9TVVBF",
            "Ul9FRkZFQ1RJVkVfQ0hBUkdFEAoSDQoJV0lUSF9JVEVNEAsSGAoUV0lUSF9V",
            "TklRVUVfUE9LRVNUT1AQDBIWChJXSVRIX1FVRVNUX0NPTlRFWFQQDRIcChhX",
            "SVRIX1RIUk9XX1RZUEVfSU5fQV9ST1cQDhITCg9XSVRIX0NVUlZFX0JBTEwQ",
            "DxITCg9XSVRIX0JBREdFX1RZUEUQEBIVChFXSVRIX1BMQVlFUl9MRVZFTBAR",
            "EhoKFldJVEhfV0lOX0JBVFRMRV9TVEFUVVMQEhITCg9XSVRIX05FV19GUklF",
            "TkQQE2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.ActivityTypeReflection.Descriptor, global::POGOProtos.Enums.BadgeTypeReflection.Descriptor, global::POGOProtos.Enums.PokemonIdReflection.Descriptor, global::POGOProtos.Enums.PokemonTypeReflection.Descriptor, global::POGOProtos.Enums.RaidLevelReflection.Descriptor, global::POGOProtos.Inventory.Item.ItemIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition), global::POGOProtos.Data.Quests.QuestCondition.Parser, new[]{ "Type", "WithPokemonType", "WithPokemonCategory", "WithWeatherBoost", "WithDailyCaptureBonus", "WithDailySpinBonus", "WithWinRaidStatus", "WithRaidLevel", "WithThrowType", "WithWinGymBattleStatus", "WithSuperEffectiveChargeMove", "WithItem", "WithUniquePokestop", "WithQuestContext", "WithBadgeType", "WithPlayerLevel", "WithWinBattleStatus" }, null, new[]{ typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.ConditionType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonType), global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonType.Parser, new[]{ "PokemonType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithWeatherBoost), global::POGOProtos.Data.Quests.QuestCondition.Types.WithWeatherBoost.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonCategory), global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonCategory.Parser, new[]{ "CategoryName", "PokemonIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailyCaptureBonus), global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailyCaptureBonus.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailySpinBonus), global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailySpinBonus.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinRaidStatus), global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinRaidStatus.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithRaidLevel), global::POGOProtos.Data.Quests.QuestCondition.Types.WithRaidLevel.Parser, new[]{ "RaidLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithThrowType), global::POGOProtos.Data.Quests.QuestCondition.Types.WithThrowType.Parser, new[]{ "ThrowType", "Hit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithCurveBall), global::POGOProtos.Data.Quests.QuestCondition.Types.WithCurveBall.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinGymBattleStatus), global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinGymBattleStatus.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithSuperEffectiveChargeMove), global::POGOProtos.Data.Quests.QuestCondition.Types.WithSuperEffectiveChargeMove.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithItem), global::POGOProtos.Data.Quests.QuestCondition.Types.WithItem.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithUniquePokestop), global::POGOProtos.Data.Quests.QuestCondition.Types.WithUniquePokestop.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext), global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext.Parser, new[]{ "Context" }, null, new[]{ typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext.Types.Context) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithBadgeType), global::POGOProtos.Data.Quests.QuestCondition.Types.WithBadgeType.Parser, new[]{ "BadgeType", "BadgeRank", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithPlayerLevel), global::POGOProtos.Data.Quests.QuestCondition.Types.WithPlayerLevel.Parser, new[]{ "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinBattleStatus), global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinBattleStatus.Parser, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QuestCondition : pb::IMessage<QuestCondition> {
    private static readonly pb::MessageParser<QuestCondition> _parser = new pb::MessageParser<QuestCondition>(() => new QuestCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.Quests.QuestConditionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestCondition(QuestCondition other) : this() {
      type_ = other.type_;
      withPokemonType_ = other.withPokemonType_ != null ? other.withPokemonType_.Clone() : null;
      withPokemonCategory_ = other.withPokemonCategory_ != null ? other.withPokemonCategory_.Clone() : null;
      withWeatherBoost_ = other.withWeatherBoost_ != null ? other.withWeatherBoost_.Clone() : null;
      withDailyCaptureBonus_ = other.withDailyCaptureBonus_ != null ? other.withDailyCaptureBonus_.Clone() : null;
      withDailySpinBonus_ = other.withDailySpinBonus_ != null ? other.withDailySpinBonus_.Clone() : null;
      withWinRaidStatus_ = other.withWinRaidStatus_ != null ? other.withWinRaidStatus_.Clone() : null;
      withRaidLevel_ = other.withRaidLevel_ != null ? other.withRaidLevel_.Clone() : null;
      withThrowType_ = other.withThrowType_ != null ? other.withThrowType_.Clone() : null;
      withWinGymBattleStatus_ = other.withWinGymBattleStatus_ != null ? other.withWinGymBattleStatus_.Clone() : null;
      withSuperEffectiveChargeMove_ = other.withSuperEffectiveChargeMove_ != null ? other.withSuperEffectiveChargeMove_.Clone() : null;
      withItem_ = other.withItem_ != null ? other.withItem_.Clone() : null;
      withUniquePokestop_ = other.withUniquePokestop_ != null ? other.withUniquePokestop_.Clone() : null;
      withQuestContext_ = other.withQuestContext_ != null ? other.withQuestContext_.Clone() : null;
      withBadgeType_ = other.withBadgeType_ != null ? other.withBadgeType_.Clone() : null;
      withPlayerLevel_ = other.withPlayerLevel_ != null ? other.withPlayerLevel_.Clone() : null;
      withWinBattleStatus_ = other.withWinBattleStatus_ != null ? other.withWinBattleStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestCondition Clone() {
      return new QuestCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.ConditionType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.ConditionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "with_pokemon_type" field.</summary>
    public const int WithPokemonTypeFieldNumber = 2;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonType withPokemonType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonType WithPokemonType {
      get { return withPokemonType_; }
      set {
        withPokemonType_ = value;
      }
    }

    /// <summary>Field number for the "with_pokemon_category" field.</summary>
    public const int WithPokemonCategoryFieldNumber = 3;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonCategory withPokemonCategory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonCategory WithPokemonCategory {
      get { return withPokemonCategory_; }
      set {
        withPokemonCategory_ = value;
      }
    }

    /// <summary>Field number for the "with_weather_boost" field.</summary>
    public const int WithWeatherBoostFieldNumber = 4;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithWeatherBoost withWeatherBoost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithWeatherBoost WithWeatherBoost {
      get { return withWeatherBoost_; }
      set {
        withWeatherBoost_ = value;
      }
    }

    /// <summary>Field number for the "with_daily_capture_bonus" field.</summary>
    public const int WithDailyCaptureBonusFieldNumber = 5;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailyCaptureBonus withDailyCaptureBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailyCaptureBonus WithDailyCaptureBonus {
      get { return withDailyCaptureBonus_; }
      set {
        withDailyCaptureBonus_ = value;
      }
    }

    /// <summary>Field number for the "with_daily_spin_bonus" field.</summary>
    public const int WithDailySpinBonusFieldNumber = 6;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailySpinBonus withDailySpinBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailySpinBonus WithDailySpinBonus {
      get { return withDailySpinBonus_; }
      set {
        withDailySpinBonus_ = value;
      }
    }

    /// <summary>Field number for the "with_win_raid_status" field.</summary>
    public const int WithWinRaidStatusFieldNumber = 7;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinRaidStatus withWinRaidStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinRaidStatus WithWinRaidStatus {
      get { return withWinRaidStatus_; }
      set {
        withWinRaidStatus_ = value;
      }
    }

    /// <summary>Field number for the "with_raid_level" field.</summary>
    public const int WithRaidLevelFieldNumber = 8;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithRaidLevel withRaidLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithRaidLevel WithRaidLevel {
      get { return withRaidLevel_; }
      set {
        withRaidLevel_ = value;
      }
    }

    /// <summary>Field number for the "with_throw_type" field.</summary>
    public const int WithThrowTypeFieldNumber = 9;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithThrowType withThrowType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithThrowType WithThrowType {
      get { return withThrowType_; }
      set {
        withThrowType_ = value;
      }
    }

    /// <summary>Field number for the "with_win_gym_battle_status" field.</summary>
    public const int WithWinGymBattleStatusFieldNumber = 10;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinGymBattleStatus withWinGymBattleStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinGymBattleStatus WithWinGymBattleStatus {
      get { return withWinGymBattleStatus_; }
      set {
        withWinGymBattleStatus_ = value;
      }
    }

    /// <summary>Field number for the "with_super_effective_charge_move" field.</summary>
    public const int WithSuperEffectiveChargeMoveFieldNumber = 11;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithSuperEffectiveChargeMove withSuperEffectiveChargeMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithSuperEffectiveChargeMove WithSuperEffectiveChargeMove {
      get { return withSuperEffectiveChargeMove_; }
      set {
        withSuperEffectiveChargeMove_ = value;
      }
    }

    /// <summary>Field number for the "with_item" field.</summary>
    public const int WithItemFieldNumber = 12;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithItem withItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithItem WithItem {
      get { return withItem_; }
      set {
        withItem_ = value;
      }
    }

    /// <summary>Field number for the "with_unique_pokestop" field.</summary>
    public const int WithUniquePokestopFieldNumber = 13;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithUniquePokestop withUniquePokestop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithUniquePokestop WithUniquePokestop {
      get { return withUniquePokestop_; }
      set {
        withUniquePokestop_ = value;
      }
    }

    /// <summary>Field number for the "with_quest_context" field.</summary>
    public const int WithQuestContextFieldNumber = 14;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext withQuestContext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext WithQuestContext {
      get { return withQuestContext_; }
      set {
        withQuestContext_ = value;
      }
    }

    /// <summary>Field number for the "with_badge_type" field.</summary>
    public const int WithBadgeTypeFieldNumber = 15;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithBadgeType withBadgeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithBadgeType WithBadgeType {
      get { return withBadgeType_; }
      set {
        withBadgeType_ = value;
      }
    }

    /// <summary>Field number for the "with_player_level" field.</summary>
    public const int WithPlayerLevelFieldNumber = 16;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithPlayerLevel withPlayerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithPlayerLevel WithPlayerLevel {
      get { return withPlayerLevel_; }
      set {
        withPlayerLevel_ = value;
      }
    }

    /// <summary>Field number for the "with_win_battle_status" field.</summary>
    public const int WithWinBattleStatusFieldNumber = 17;
    private global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinBattleStatus withWinBattleStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinBattleStatus WithWinBattleStatus {
      get { return withWinBattleStatus_; }
      set {
        withWinBattleStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(WithPokemonType, other.WithPokemonType)) return false;
      if (!object.Equals(WithPokemonCategory, other.WithPokemonCategory)) return false;
      if (!object.Equals(WithWeatherBoost, other.WithWeatherBoost)) return false;
      if (!object.Equals(WithDailyCaptureBonus, other.WithDailyCaptureBonus)) return false;
      if (!object.Equals(WithDailySpinBonus, other.WithDailySpinBonus)) return false;
      if (!object.Equals(WithWinRaidStatus, other.WithWinRaidStatus)) return false;
      if (!object.Equals(WithRaidLevel, other.WithRaidLevel)) return false;
      if (!object.Equals(WithThrowType, other.WithThrowType)) return false;
      if (!object.Equals(WithWinGymBattleStatus, other.WithWinGymBattleStatus)) return false;
      if (!object.Equals(WithSuperEffectiveChargeMove, other.WithSuperEffectiveChargeMove)) return false;
      if (!object.Equals(WithItem, other.WithItem)) return false;
      if (!object.Equals(WithUniquePokestop, other.WithUniquePokestop)) return false;
      if (!object.Equals(WithQuestContext, other.WithQuestContext)) return false;
      if (!object.Equals(WithBadgeType, other.WithBadgeType)) return false;
      if (!object.Equals(WithPlayerLevel, other.WithPlayerLevel)) return false;
      if (!object.Equals(WithWinBattleStatus, other.WithWinBattleStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (withPokemonType_ != null) hash ^= WithPokemonType.GetHashCode();
      if (withPokemonCategory_ != null) hash ^= WithPokemonCategory.GetHashCode();
      if (withWeatherBoost_ != null) hash ^= WithWeatherBoost.GetHashCode();
      if (withDailyCaptureBonus_ != null) hash ^= WithDailyCaptureBonus.GetHashCode();
      if (withDailySpinBonus_ != null) hash ^= WithDailySpinBonus.GetHashCode();
      if (withWinRaidStatus_ != null) hash ^= WithWinRaidStatus.GetHashCode();
      if (withRaidLevel_ != null) hash ^= WithRaidLevel.GetHashCode();
      if (withThrowType_ != null) hash ^= WithThrowType.GetHashCode();
      if (withWinGymBattleStatus_ != null) hash ^= WithWinGymBattleStatus.GetHashCode();
      if (withSuperEffectiveChargeMove_ != null) hash ^= WithSuperEffectiveChargeMove.GetHashCode();
      if (withItem_ != null) hash ^= WithItem.GetHashCode();
      if (withUniquePokestop_ != null) hash ^= WithUniquePokestop.GetHashCode();
      if (withQuestContext_ != null) hash ^= WithQuestContext.GetHashCode();
      if (withBadgeType_ != null) hash ^= WithBadgeType.GetHashCode();
      if (withPlayerLevel_ != null) hash ^= WithPlayerLevel.GetHashCode();
      if (withWinBattleStatus_ != null) hash ^= WithWinBattleStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (withPokemonType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WithPokemonType);
      }
      if (withPokemonCategory_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WithPokemonCategory);
      }
      if (withWeatherBoost_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WithWeatherBoost);
      }
      if (withDailyCaptureBonus_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(WithDailyCaptureBonus);
      }
      if (withDailySpinBonus_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WithDailySpinBonus);
      }
      if (withWinRaidStatus_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WithWinRaidStatus);
      }
      if (withRaidLevel_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(WithRaidLevel);
      }
      if (withThrowType_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(WithThrowType);
      }
      if (withWinGymBattleStatus_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WithWinGymBattleStatus);
      }
      if (withSuperEffectiveChargeMove_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(WithSuperEffectiveChargeMove);
      }
      if (withItem_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(WithItem);
      }
      if (withUniquePokestop_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(WithUniquePokestop);
      }
      if (withQuestContext_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(WithQuestContext);
      }
      if (withBadgeType_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(WithBadgeType);
      }
      if (withPlayerLevel_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(WithPlayerLevel);
      }
      if (withWinBattleStatus_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(WithWinBattleStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (withPokemonType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithPokemonType);
      }
      if (withPokemonCategory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithPokemonCategory);
      }
      if (withWeatherBoost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithWeatherBoost);
      }
      if (withDailyCaptureBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithDailyCaptureBonus);
      }
      if (withDailySpinBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithDailySpinBonus);
      }
      if (withWinRaidStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithWinRaidStatus);
      }
      if (withRaidLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithRaidLevel);
      }
      if (withThrowType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithThrowType);
      }
      if (withWinGymBattleStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithWinGymBattleStatus);
      }
      if (withSuperEffectiveChargeMove_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithSuperEffectiveChargeMove);
      }
      if (withItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithItem);
      }
      if (withUniquePokestop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithUniquePokestop);
      }
      if (withQuestContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithQuestContext);
      }
      if (withBadgeType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithBadgeType);
      }
      if (withPlayerLevel_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WithPlayerLevel);
      }
      if (withWinBattleStatus_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WithWinBattleStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestCondition other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.withPokemonType_ != null) {
        if (withPokemonType_ == null) {
          withPokemonType_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonType();
        }
        WithPokemonType.MergeFrom(other.WithPokemonType);
      }
      if (other.withPokemonCategory_ != null) {
        if (withPokemonCategory_ == null) {
          withPokemonCategory_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonCategory();
        }
        WithPokemonCategory.MergeFrom(other.WithPokemonCategory);
      }
      if (other.withWeatherBoost_ != null) {
        if (withWeatherBoost_ == null) {
          withWeatherBoost_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithWeatherBoost();
        }
        WithWeatherBoost.MergeFrom(other.WithWeatherBoost);
      }
      if (other.withDailyCaptureBonus_ != null) {
        if (withDailyCaptureBonus_ == null) {
          withDailyCaptureBonus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailyCaptureBonus();
        }
        WithDailyCaptureBonus.MergeFrom(other.WithDailyCaptureBonus);
      }
      if (other.withDailySpinBonus_ != null) {
        if (withDailySpinBonus_ == null) {
          withDailySpinBonus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailySpinBonus();
        }
        WithDailySpinBonus.MergeFrom(other.WithDailySpinBonus);
      }
      if (other.withWinRaidStatus_ != null) {
        if (withWinRaidStatus_ == null) {
          withWinRaidStatus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinRaidStatus();
        }
        WithWinRaidStatus.MergeFrom(other.WithWinRaidStatus);
      }
      if (other.withRaidLevel_ != null) {
        if (withRaidLevel_ == null) {
          withRaidLevel_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithRaidLevel();
        }
        WithRaidLevel.MergeFrom(other.WithRaidLevel);
      }
      if (other.withThrowType_ != null) {
        if (withThrowType_ == null) {
          withThrowType_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithThrowType();
        }
        WithThrowType.MergeFrom(other.WithThrowType);
      }
      if (other.withWinGymBattleStatus_ != null) {
        if (withWinGymBattleStatus_ == null) {
          withWinGymBattleStatus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinGymBattleStatus();
        }
        WithWinGymBattleStatus.MergeFrom(other.WithWinGymBattleStatus);
      }
      if (other.withSuperEffectiveChargeMove_ != null) {
        if (withSuperEffectiveChargeMove_ == null) {
          withSuperEffectiveChargeMove_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithSuperEffectiveChargeMove();
        }
        WithSuperEffectiveChargeMove.MergeFrom(other.WithSuperEffectiveChargeMove);
      }
      if (other.withItem_ != null) {
        if (withItem_ == null) {
          withItem_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithItem();
        }
        WithItem.MergeFrom(other.WithItem);
      }
      if (other.withUniquePokestop_ != null) {
        if (withUniquePokestop_ == null) {
          withUniquePokestop_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithUniquePokestop();
        }
        WithUniquePokestop.MergeFrom(other.WithUniquePokestop);
      }
      if (other.withQuestContext_ != null) {
        if (withQuestContext_ == null) {
          withQuestContext_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext();
        }
        WithQuestContext.MergeFrom(other.WithQuestContext);
      }
      if (other.withBadgeType_ != null) {
        if (withBadgeType_ == null) {
          withBadgeType_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithBadgeType();
        }
        WithBadgeType.MergeFrom(other.WithBadgeType);
      }
      if (other.withPlayerLevel_ != null) {
        if (withPlayerLevel_ == null) {
          withPlayerLevel_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithPlayerLevel();
        }
        WithPlayerLevel.MergeFrom(other.WithPlayerLevel);
      }
      if (other.withWinBattleStatus_ != null) {
        if (withWinBattleStatus_ == null) {
          withWinBattleStatus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinBattleStatus();
        }
        WithWinBattleStatus.MergeFrom(other.WithWinBattleStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::POGOProtos.Data.Quests.QuestCondition.Types.ConditionType) input.ReadEnum();
            break;
          }
          case 18: {
            if (withPokemonType_ == null) {
              withPokemonType_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonType();
            }
            input.ReadMessage(withPokemonType_);
            break;
          }
          case 26: {
            if (withPokemonCategory_ == null) {
              withPokemonCategory_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithPokemonCategory();
            }
            input.ReadMessage(withPokemonCategory_);
            break;
          }
          case 34: {
            if (withWeatherBoost_ == null) {
              withWeatherBoost_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithWeatherBoost();
            }
            input.ReadMessage(withWeatherBoost_);
            break;
          }
          case 42: {
            if (withDailyCaptureBonus_ == null) {
              withDailyCaptureBonus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailyCaptureBonus();
            }
            input.ReadMessage(withDailyCaptureBonus_);
            break;
          }
          case 50: {
            if (withDailySpinBonus_ == null) {
              withDailySpinBonus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithDailySpinBonus();
            }
            input.ReadMessage(withDailySpinBonus_);
            break;
          }
          case 58: {
            if (withWinRaidStatus_ == null) {
              withWinRaidStatus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinRaidStatus();
            }
            input.ReadMessage(withWinRaidStatus_);
            break;
          }
          case 66: {
            if (withRaidLevel_ == null) {
              withRaidLevel_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithRaidLevel();
            }
            input.ReadMessage(withRaidLevel_);
            break;
          }
          case 74: {
            if (withThrowType_ == null) {
              withThrowType_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithThrowType();
            }
            input.ReadMessage(withThrowType_);
            break;
          }
          case 82: {
            if (withWinGymBattleStatus_ == null) {
              withWinGymBattleStatus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinGymBattleStatus();
            }
            input.ReadMessage(withWinGymBattleStatus_);
            break;
          }
          case 90: {
            if (withSuperEffectiveChargeMove_ == null) {
              withSuperEffectiveChargeMove_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithSuperEffectiveChargeMove();
            }
            input.ReadMessage(withSuperEffectiveChargeMove_);
            break;
          }
          case 98: {
            if (withItem_ == null) {
              withItem_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithItem();
            }
            input.ReadMessage(withItem_);
            break;
          }
          case 106: {
            if (withUniquePokestop_ == null) {
              withUniquePokestop_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithUniquePokestop();
            }
            input.ReadMessage(withUniquePokestop_);
            break;
          }
          case 114: {
            if (withQuestContext_ == null) {
              withQuestContext_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext();
            }
            input.ReadMessage(withQuestContext_);
            break;
          }
          case 122: {
            if (withBadgeType_ == null) {
              withBadgeType_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithBadgeType();
            }
            input.ReadMessage(withBadgeType_);
            break;
          }
          case 130: {
            if (withPlayerLevel_ == null) {
              withPlayerLevel_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithPlayerLevel();
            }
            input.ReadMessage(withPlayerLevel_);
            break;
          }
          case 138: {
            if (withWinBattleStatus_ == null) {
              withWinBattleStatus_ = new global::POGOProtos.Data.Quests.QuestCondition.Types.WithWinBattleStatus();
            }
            input.ReadMessage(withWinBattleStatus_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the QuestCondition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ConditionType {
        [pbr::OriginalName("UNSET")] Unset = 0,
        [pbr::OriginalName("WITH_POKEMON_TYPE")] WithPokemonType = 1,
        [pbr::OriginalName("WITH_POKEMON_CATEGORY")] WithPokemonCategory = 2,
        [pbr::OriginalName("WITH_WEATHER_BOOST")] WithWeatherBoost = 3,
        [pbr::OriginalName("WITH_DAILY_CAPTURE_BONUS")] WithDailyCaptureBonus = 4,
        [pbr::OriginalName("WITH_DAILY_SPIN_BONUS")] WithDailySpinBonus = 5,
        [pbr::OriginalName("WITH_WIN_RAID_STATUS")] WithWinRaidStatus = 6,
        [pbr::OriginalName("WITH_RAID_LEVEL")] WithRaidLevel = 7,
        [pbr::OriginalName("WITH_THROW_TYPE")] WithThrowType = 8,
        [pbr::OriginalName("WITH_WIN_GYM_BATTLE_STATUS")] WithWinGymBattleStatus = 9,
        [pbr::OriginalName("WITH_SUPER_EFFECTIVE_CHARGE")] WithSuperEffectiveCharge = 10,
        [pbr::OriginalName("WITH_ITEM")] WithItem = 11,
        [pbr::OriginalName("WITH_UNIQUE_POKESTOP")] WithUniquePokestop = 12,
        [pbr::OriginalName("WITH_QUEST_CONTEXT")] WithQuestContext = 13,
        [pbr::OriginalName("WITH_THROW_TYPE_IN_A_ROW")] WithThrowTypeInARow = 14,
        [pbr::OriginalName("WITH_CURVE_BALL")] WithCurveBall = 15,
        [pbr::OriginalName("WITH_BADGE_TYPE")] WithBadgeType = 16,
        [pbr::OriginalName("WITH_PLAYER_LEVEL")] WithPlayerLevel = 17,
        [pbr::OriginalName("WITH_WIN_BATTLE_STATUS")] WithWinBattleStatus = 18,
        [pbr::OriginalName("WITH_NEW_FRIEND")] WithNewFriend = 19,
      }

      public sealed partial class WithPokemonType : pb::IMessage<WithPokemonType> {
        private static readonly pb::MessageParser<WithPokemonType> _parser = new pb::MessageParser<WithPokemonType>(() => new WithPokemonType());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithPokemonType> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithPokemonType() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithPokemonType(WithPokemonType other) : this() {
          pokemonType_ = other.pokemonType_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithPokemonType Clone() {
          return new WithPokemonType(this);
        }

        /// <summary>Field number for the "pokemon_type" field.</summary>
        public const int PokemonTypeFieldNumber = 1;
        private static readonly pb::FieldCodec<global::POGOProtos.Enums.PokemonType> _repeated_pokemonType_codec
            = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::POGOProtos.Enums.PokemonType) x);
        private readonly pbc::RepeatedField<global::POGOProtos.Enums.PokemonType> pokemonType_ = new pbc::RepeatedField<global::POGOProtos.Enums.PokemonType>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::POGOProtos.Enums.PokemonType> PokemonType {
          get { return pokemonType_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithPokemonType);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithPokemonType other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!pokemonType_.Equals(other.pokemonType_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= pokemonType_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          pokemonType_.WriteTo(output, _repeated_pokemonType_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += pokemonType_.CalculateSize(_repeated_pokemonType_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithPokemonType other) {
          if (other == null) {
            return;
          }
          pokemonType_.Add(other.pokemonType_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                pokemonType_.AddEntriesFrom(input, _repeated_pokemonType_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class WithWeatherBoost : pb::IMessage<WithWeatherBoost> {
        private static readonly pb::MessageParser<WithWeatherBoost> _parser = new pb::MessageParser<WithWeatherBoost>(() => new WithWeatherBoost());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithWeatherBoost> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWeatherBoost() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWeatherBoost(WithWeatherBoost other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWeatherBoost Clone() {
          return new WithWeatherBoost(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithWeatherBoost);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithWeatherBoost other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithWeatherBoost other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class WithPokemonCategory : pb::IMessage<WithPokemonCategory> {
        private static readonly pb::MessageParser<WithPokemonCategory> _parser = new pb::MessageParser<WithPokemonCategory>(() => new WithPokemonCategory());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithPokemonCategory> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithPokemonCategory() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithPokemonCategory(WithPokemonCategory other) : this() {
          categoryName_ = other.categoryName_;
          pokemonIds_ = other.pokemonIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithPokemonCategory Clone() {
          return new WithPokemonCategory(this);
        }

        /// <summary>Field number for the "category_name" field.</summary>
        public const int CategoryNameFieldNumber = 1;
        private string categoryName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CategoryName {
          get { return categoryName_; }
          set {
            categoryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pokemon_ids" field.</summary>
        public const int PokemonIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::POGOProtos.Enums.PokemonId> _repeated_pokemonIds_codec
            = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::POGOProtos.Enums.PokemonId) x);
        private readonly pbc::RepeatedField<global::POGOProtos.Enums.PokemonId> pokemonIds_ = new pbc::RepeatedField<global::POGOProtos.Enums.PokemonId>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::POGOProtos.Enums.PokemonId> PokemonIds {
          get { return pokemonIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithPokemonCategory);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithPokemonCategory other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CategoryName != other.CategoryName) return false;
          if(!pokemonIds_.Equals(other.pokemonIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CategoryName.Length != 0) hash ^= CategoryName.GetHashCode();
          hash ^= pokemonIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CategoryName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CategoryName);
          }
          pokemonIds_.WriteTo(output, _repeated_pokemonIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CategoryName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryName);
          }
          size += pokemonIds_.CalculateSize(_repeated_pokemonIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithPokemonCategory other) {
          if (other == null) {
            return;
          }
          if (other.CategoryName.Length != 0) {
            CategoryName = other.CategoryName;
          }
          pokemonIds_.Add(other.pokemonIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CategoryName = input.ReadString();
                break;
              }
              case 18:
              case 16: {
                pokemonIds_.AddEntriesFrom(input, _repeated_pokemonIds_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class WithDailyCaptureBonus : pb::IMessage<WithDailyCaptureBonus> {
        private static readonly pb::MessageParser<WithDailyCaptureBonus> _parser = new pb::MessageParser<WithDailyCaptureBonus>(() => new WithDailyCaptureBonus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithDailyCaptureBonus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithDailyCaptureBonus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithDailyCaptureBonus(WithDailyCaptureBonus other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithDailyCaptureBonus Clone() {
          return new WithDailyCaptureBonus(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithDailyCaptureBonus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithDailyCaptureBonus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithDailyCaptureBonus other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class WithDailySpinBonus : pb::IMessage<WithDailySpinBonus> {
        private static readonly pb::MessageParser<WithDailySpinBonus> _parser = new pb::MessageParser<WithDailySpinBonus>(() => new WithDailySpinBonus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithDailySpinBonus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithDailySpinBonus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithDailySpinBonus(WithDailySpinBonus other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithDailySpinBonus Clone() {
          return new WithDailySpinBonus(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithDailySpinBonus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithDailySpinBonus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithDailySpinBonus other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class WithWinRaidStatus : pb::IMessage<WithWinRaidStatus> {
        private static readonly pb::MessageParser<WithWinRaidStatus> _parser = new pb::MessageParser<WithWinRaidStatus>(() => new WithWinRaidStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithWinRaidStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWinRaidStatus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWinRaidStatus(WithWinRaidStatus other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWinRaidStatus Clone() {
          return new WithWinRaidStatus(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithWinRaidStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithWinRaidStatus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithWinRaidStatus other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class WithRaidLevel : pb::IMessage<WithRaidLevel> {
        private static readonly pb::MessageParser<WithRaidLevel> _parser = new pb::MessageParser<WithRaidLevel>(() => new WithRaidLevel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithRaidLevel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithRaidLevel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithRaidLevel(WithRaidLevel other) : this() {
          raidLevel_ = other.raidLevel_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithRaidLevel Clone() {
          return new WithRaidLevel(this);
        }

        /// <summary>Field number for the "raid_level" field.</summary>
        public const int RaidLevelFieldNumber = 1;
        private static readonly pb::FieldCodec<global::POGOProtos.Enums.RaidLevel> _repeated_raidLevel_codec
            = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::POGOProtos.Enums.RaidLevel) x);
        private readonly pbc::RepeatedField<global::POGOProtos.Enums.RaidLevel> raidLevel_ = new pbc::RepeatedField<global::POGOProtos.Enums.RaidLevel>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::POGOProtos.Enums.RaidLevel> RaidLevel {
          get { return raidLevel_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithRaidLevel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithRaidLevel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!raidLevel_.Equals(other.raidLevel_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= raidLevel_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          raidLevel_.WriteTo(output, _repeated_raidLevel_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += raidLevel_.CalculateSize(_repeated_raidLevel_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithRaidLevel other) {
          if (other == null) {
            return;
          }
          raidLevel_.Add(other.raidLevel_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                raidLevel_.AddEntriesFrom(input, _repeated_raidLevel_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class WithThrowType : pb::IMessage<WithThrowType> {
        private static readonly pb::MessageParser<WithThrowType> _parser = new pb::MessageParser<WithThrowType>(() => new WithThrowType());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithThrowType> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithThrowType() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithThrowType(WithThrowType other) : this() {
          throwType_ = other.throwType_;
          hit_ = other.hit_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithThrowType Clone() {
          return new WithThrowType(this);
        }

        /// <summary>Field number for the "throw_type" field.</summary>
        public const int ThrowTypeFieldNumber = 1;
        private global::POGOProtos.Enums.ActivityType throwType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::POGOProtos.Enums.ActivityType ThrowType {
          get { return throwType_; }
          set {
            throwType_ = value;
          }
        }

        /// <summary>Field number for the "hit" field.</summary>
        public const int HitFieldNumber = 2;
        private bool hit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Hit {
          get { return hit_; }
          set {
            hit_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithThrowType);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithThrowType other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ThrowType != other.ThrowType) return false;
          if (Hit != other.Hit) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ThrowType != 0) hash ^= ThrowType.GetHashCode();
          if (Hit != false) hash ^= Hit.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ThrowType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ThrowType);
          }
          if (Hit != false) {
            output.WriteRawTag(16);
            output.WriteBool(Hit);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ThrowType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ThrowType);
          }
          if (Hit != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithThrowType other) {
          if (other == null) {
            return;
          }
          if (other.ThrowType != 0) {
            ThrowType = other.ThrowType;
          }
          if (other.Hit != false) {
            Hit = other.Hit;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                throwType_ = (global::POGOProtos.Enums.ActivityType) input.ReadEnum();
                break;
              }
              case 16: {
                Hit = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WithCurveBall : pb::IMessage<WithCurveBall> {
        private static readonly pb::MessageParser<WithCurveBall> _parser = new pb::MessageParser<WithCurveBall>(() => new WithCurveBall());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithCurveBall> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithCurveBall() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithCurveBall(WithCurveBall other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithCurveBall Clone() {
          return new WithCurveBall(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithCurveBall);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithCurveBall other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithCurveBall other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class WithWinGymBattleStatus : pb::IMessage<WithWinGymBattleStatus> {
        private static readonly pb::MessageParser<WithWinGymBattleStatus> _parser = new pb::MessageParser<WithWinGymBattleStatus>(() => new WithWinGymBattleStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithWinGymBattleStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWinGymBattleStatus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWinGymBattleStatus(WithWinGymBattleStatus other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWinGymBattleStatus Clone() {
          return new WithWinGymBattleStatus(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithWinGymBattleStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithWinGymBattleStatus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithWinGymBattleStatus other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class WithSuperEffectiveChargeMove : pb::IMessage<WithSuperEffectiveChargeMove> {
        private static readonly pb::MessageParser<WithSuperEffectiveChargeMove> _parser = new pb::MessageParser<WithSuperEffectiveChargeMove>(() => new WithSuperEffectiveChargeMove());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithSuperEffectiveChargeMove> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithSuperEffectiveChargeMove() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithSuperEffectiveChargeMove(WithSuperEffectiveChargeMove other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithSuperEffectiveChargeMove Clone() {
          return new WithSuperEffectiveChargeMove(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithSuperEffectiveChargeMove);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithSuperEffectiveChargeMove other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithSuperEffectiveChargeMove other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class WithItem : pb::IMessage<WithItem> {
        private static readonly pb::MessageParser<WithItem> _parser = new pb::MessageParser<WithItem>(() => new WithItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithItem(WithItem other) : this() {
          item_ = other.item_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithItem Clone() {
          return new WithItem(this);
        }

        /// <summary>Field number for the "item" field.</summary>
        public const int ItemFieldNumber = 1;
        private global::POGOProtos.Inventory.Item.ItemId item_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::POGOProtos.Inventory.Item.ItemId Item {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Item != other.Item) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Item != 0) hash ^= Item.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Item != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Item);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Item != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Item);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithItem other) {
          if (other == null) {
            return;
          }
          if (other.Item != 0) {
            Item = other.Item;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                item_ = (global::POGOProtos.Inventory.Item.ItemId) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WithUniquePokestop : pb::IMessage<WithUniquePokestop> {
        private static readonly pb::MessageParser<WithUniquePokestop> _parser = new pb::MessageParser<WithUniquePokestop>(() => new WithUniquePokestop());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithUniquePokestop> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithUniquePokestop() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithUniquePokestop(WithUniquePokestop other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithUniquePokestop Clone() {
          return new WithUniquePokestop(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithUniquePokestop);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithUniquePokestop other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithUniquePokestop other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class WithQuestContext : pb::IMessage<WithQuestContext> {
        private static readonly pb::MessageParser<WithQuestContext> _parser = new pb::MessageParser<WithQuestContext>(() => new WithQuestContext());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithQuestContext> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithQuestContext() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithQuestContext(WithQuestContext other) : this() {
          context_ = other.context_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithQuestContext Clone() {
          return new WithQuestContext(this);
        }

        /// <summary>Field number for the "context" field.</summary>
        public const int ContextFieldNumber = 1;
        private global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext.Types.Context context_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext.Types.Context Context {
          get { return context_; }
          set {
            context_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithQuestContext);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithQuestContext other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Context != other.Context) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Context != 0) hash ^= Context.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Context != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Context);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Context != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Context);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithQuestContext other) {
          if (other == null) {
            return;
          }
          if (other.Context != 0) {
            Context = other.Context;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                context_ = (global::POGOProtos.Data.Quests.QuestCondition.Types.WithQuestContext.Types.Context) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the WithQuestContext message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Context {
            [pbr::OriginalName("UNSET")] Unset = 0,
            [pbr::OriginalName("STORY_QUEST")] StoryQuest = 1,
            [pbr::OriginalName("CHALLENGE_QUEST")] ChallengeQuest = 2,
          }

        }
        #endregion

      }

      public sealed partial class WithBadgeType : pb::IMessage<WithBadgeType> {
        private static readonly pb::MessageParser<WithBadgeType> _parser = new pb::MessageParser<WithBadgeType>(() => new WithBadgeType());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithBadgeType> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithBadgeType() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithBadgeType(WithBadgeType other) : this() {
          badgeType_ = other.badgeType_.Clone();
          badgeRank_ = other.badgeRank_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithBadgeType Clone() {
          return new WithBadgeType(this);
        }

        /// <summary>Field number for the "badge_type" field.</summary>
        public const int BadgeTypeFieldNumber = 1;
        private static readonly pb::FieldCodec<global::POGOProtos.Enums.BadgeType> _repeated_badgeType_codec
            = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::POGOProtos.Enums.BadgeType) x);
        private readonly pbc::RepeatedField<global::POGOProtos.Enums.BadgeType> badgeType_ = new pbc::RepeatedField<global::POGOProtos.Enums.BadgeType>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::POGOProtos.Enums.BadgeType> BadgeType {
          get { return badgeType_; }
        }

        /// <summary>Field number for the "badge_rank" field.</summary>
        public const int BadgeRankFieldNumber = 2;
        private int badgeRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BadgeRank {
          get { return badgeRank_; }
          set {
            badgeRank_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 3;
        private int amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithBadgeType);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithBadgeType other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!badgeType_.Equals(other.badgeType_)) return false;
          if (BadgeRank != other.BadgeRank) return false;
          if (Amount != other.Amount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= badgeType_.GetHashCode();
          if (BadgeRank != 0) hash ^= BadgeRank.GetHashCode();
          if (Amount != 0) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          badgeType_.WriteTo(output, _repeated_badgeType_codec);
          if (BadgeRank != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(BadgeRank);
          }
          if (Amount != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += badgeType_.CalculateSize(_repeated_badgeType_codec);
          if (BadgeRank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BadgeRank);
          }
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithBadgeType other) {
          if (other == null) {
            return;
          }
          badgeType_.Add(other.badgeType_);
          if (other.BadgeRank != 0) {
            BadgeRank = other.BadgeRank;
          }
          if (other.Amount != 0) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                badgeType_.AddEntriesFrom(input, _repeated_badgeType_codec);
                break;
              }
              case 16: {
                BadgeRank = input.ReadInt32();
                break;
              }
              case 24: {
                Amount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WithPlayerLevel : pb::IMessage<WithPlayerLevel> {
        private static readonly pb::MessageParser<WithPlayerLevel> _parser = new pb::MessageParser<WithPlayerLevel>(() => new WithPlayerLevel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithPlayerLevel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithPlayerLevel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithPlayerLevel(WithPlayerLevel other) : this() {
          level_ = other.level_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithPlayerLevel Clone() {
          return new WithPlayerLevel(this);
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 1;
        private int level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithPlayerLevel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithPlayerLevel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Level != other.Level) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Level != 0) hash ^= Level.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Level);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithPlayerLevel other) {
          if (other == null) {
            return;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Level = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WithWinBattleStatus : pb::IMessage<WithWinBattleStatus> {
        private static readonly pb::MessageParser<WithWinBattleStatus> _parser = new pb::MessageParser<WithWinBattleStatus>(() => new WithWinBattleStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WithWinBattleStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Data.Quests.QuestCondition.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWinBattleStatus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWinBattleStatus(WithWinBattleStatus other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WithWinBattleStatus Clone() {
          return new WithWinBattleStatus(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WithWinBattleStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WithWinBattleStatus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WithWinBattleStatus other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
