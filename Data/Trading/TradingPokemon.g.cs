// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Data/Trading/TradingPokemon.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data.Trading {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/Trading/TradingPokemon.proto</summary>
  public static partial class TradingPokemonReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/Trading/TradingPokemon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TradingPokemonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQT0dPUHJvdG9zL0RhdGEvVHJhZGluZy9UcmFkaW5nUG9rZW1vbi5wcm90",
            "bxIXUE9HT1Byb3Rvcy5EYXRhLlRyYWRpbmcaJFBPR09Qcm90b3MvRGF0YS9Q",
            "b2tlbW9uRGlzcGxheS5wcm90bxohUE9HT1Byb3Rvcy9EYXRhL1Bva2Vtb25E",
            "YXRhLnByb3RvGihQT0dPUHJvdG9zL0ludmVudG9yeS9JdGVtL0l0ZW1EYXRh",
            "LnByb3RvIsAECg5UcmFkaW5nUG9rZW1vbhISCgpwb2tlbW9uX2lkGAEgASgG",
            "EhwKFHBva2VkZXhfZW50cnlfbnVtYmVyGAIgASgFEhMKC29yaWdpbmFsX2Nw",
            "GAMgASgFEhcKD2FkanVzdGVkX2NwX21pbhgEIAEoBRIXCg9hZGp1c3RlZF9j",
            "cF9tYXgYBSABKAUSGAoQb3JpZ2luYWxfc3RhbWluYRgGIAEoBRIcChRhZGp1",
            "c3RlZF9zdGFtaW5hX21pbhgHIAEoBRIcChRhZGp1c3RlZF9zdGFtaW5hX21h",
            "eBgIIAEoBRIYChBmcmllbmRfbGV2ZWxfY2FwGAkgASgIEg0KBW1vdmUxGAog",
            "ASgFEg0KBW1vdmUyGAsgASgFEjgKD3Bva2Vtb25fZGlzcGxheRgMIAEoCzIf",
            "LlBPR09Qcm90b3MuRGF0YS5Qb2tlbW9uRGlzcGxheRIbChNjYXB0dXJlZF9z",
            "Ml9jZWxsX2lkGA0gASgDEjQKDnRyYWRlZF9wb2tlbW9uGA4gASgLMhwuUE9H",
            "T1Byb3Rvcy5EYXRhLlBva2Vtb25EYXRhEjUKCHBva2ViYWxsGA8gASgLMiMu",
            "UE9HT1Byb3Rvcy5JbnZlbnRvcnkuSXRlbS5JdGVtRGF0YRIZChFpbmRpdmlk",
            "dWFsX2F0dGFjaxgQIAEoBRIaChJpbmRpdmlkdWFsX2RlZmVuc2UYESABKAUS",
            "GgoSaW5kaXZpZHVhbF9zdGFtaW5hGBIgASgFEhAKCG5pY2tuYW1lGBMgASgJ",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Data.PokemonDisplayReflection.Descriptor, global::POGOProtos.Data.PokemonDataReflection.Descriptor, global::POGOProtos.Inventory.Item.ItemDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Trading.TradingPokemon), global::POGOProtos.Data.Trading.TradingPokemon.Parser, new[]{ "PokemonId", "PokedexEntryNumber", "OriginalCp", "AdjustedCpMin", "AdjustedCpMax", "OriginalStamina", "AdjustedStaminaMin", "AdjustedStaminaMax", "FriendLevelCap", "Move1", "Move2", "PokemonDisplay", "CapturedS2CellId", "TradedPokemon", "Pokeball", "IndividualAttack", "IndividualDefense", "IndividualStamina", "Nickname" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TradingPokemon : pb::IMessage<TradingPokemon> {
    private static readonly pb::MessageParser<TradingPokemon> _parser = new pb::MessageParser<TradingPokemon>(() => new TradingPokemon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradingPokemon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.Trading.TradingPokemonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingPokemon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingPokemon(TradingPokemon other) : this() {
      pokemonId_ = other.pokemonId_;
      pokedexEntryNumber_ = other.pokedexEntryNumber_;
      originalCp_ = other.originalCp_;
      adjustedCpMin_ = other.adjustedCpMin_;
      adjustedCpMax_ = other.adjustedCpMax_;
      originalStamina_ = other.originalStamina_;
      adjustedStaminaMin_ = other.adjustedStaminaMin_;
      adjustedStaminaMax_ = other.adjustedStaminaMax_;
      friendLevelCap_ = other.friendLevelCap_;
      move1_ = other.move1_;
      move2_ = other.move2_;
      pokemonDisplay_ = other.pokemonDisplay_ != null ? other.pokemonDisplay_.Clone() : null;
      capturedS2CellId_ = other.capturedS2CellId_;
      tradedPokemon_ = other.tradedPokemon_ != null ? other.tradedPokemon_.Clone() : null;
      pokeball_ = other.pokeball_ != null ? other.pokeball_.Clone() : null;
      individualAttack_ = other.individualAttack_;
      individualDefense_ = other.individualDefense_;
      individualStamina_ = other.individualStamina_;
      nickname_ = other.nickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingPokemon Clone() {
      return new TradingPokemon(this);
    }

    /// <summary>Field number for the "pokemon_id" field.</summary>
    public const int PokemonIdFieldNumber = 1;
    private ulong pokemonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    /// <summary>Field number for the "pokedex_entry_number" field.</summary>
    public const int PokedexEntryNumberFieldNumber = 2;
    private int pokedexEntryNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PokedexEntryNumber {
      get { return pokedexEntryNumber_; }
      set {
        pokedexEntryNumber_ = value;
      }
    }

    /// <summary>Field number for the "original_cp" field.</summary>
    public const int OriginalCpFieldNumber = 3;
    private int originalCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginalCp {
      get { return originalCp_; }
      set {
        originalCp_ = value;
      }
    }

    /// <summary>Field number for the "adjusted_cp_min" field.</summary>
    public const int AdjustedCpMinFieldNumber = 4;
    private int adjustedCpMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdjustedCpMin {
      get { return adjustedCpMin_; }
      set {
        adjustedCpMin_ = value;
      }
    }

    /// <summary>Field number for the "adjusted_cp_max" field.</summary>
    public const int AdjustedCpMaxFieldNumber = 5;
    private int adjustedCpMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdjustedCpMax {
      get { return adjustedCpMax_; }
      set {
        adjustedCpMax_ = value;
      }
    }

    /// <summary>Field number for the "original_stamina" field.</summary>
    public const int OriginalStaminaFieldNumber = 6;
    private int originalStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginalStamina {
      get { return originalStamina_; }
      set {
        originalStamina_ = value;
      }
    }

    /// <summary>Field number for the "adjusted_stamina_min" field.</summary>
    public const int AdjustedStaminaMinFieldNumber = 7;
    private int adjustedStaminaMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdjustedStaminaMin {
      get { return adjustedStaminaMin_; }
      set {
        adjustedStaminaMin_ = value;
      }
    }

    /// <summary>Field number for the "adjusted_stamina_max" field.</summary>
    public const int AdjustedStaminaMaxFieldNumber = 8;
    private int adjustedStaminaMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdjustedStaminaMax {
      get { return adjustedStaminaMax_; }
      set {
        adjustedStaminaMax_ = value;
      }
    }

    /// <summary>Field number for the "friend_level_cap" field.</summary>
    public const int FriendLevelCapFieldNumber = 9;
    private bool friendLevelCap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FriendLevelCap {
      get { return friendLevelCap_; }
      set {
        friendLevelCap_ = value;
      }
    }

    /// <summary>Field number for the "move1" field.</summary>
    public const int Move1FieldNumber = 10;
    private int move1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Move1 {
      get { return move1_; }
      set {
        move1_ = value;
      }
    }

    /// <summary>Field number for the "move2" field.</summary>
    public const int Move2FieldNumber = 11;
    private int move2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Move2 {
      get { return move2_; }
      set {
        move2_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_display" field.</summary>
    public const int PokemonDisplayFieldNumber = 12;
    private global::POGOProtos.Data.PokemonDisplay pokemonDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.PokemonDisplay PokemonDisplay {
      get { return pokemonDisplay_; }
      set {
        pokemonDisplay_ = value;
      }
    }

    /// <summary>Field number for the "captured_s2_cell_id" field.</summary>
    public const int CapturedS2CellIdFieldNumber = 13;
    private long capturedS2CellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CapturedS2CellId {
      get { return capturedS2CellId_; }
      set {
        capturedS2CellId_ = value;
      }
    }

    /// <summary>Field number for the "traded_pokemon" field.</summary>
    public const int TradedPokemonFieldNumber = 14;
    private global::POGOProtos.Data.PokemonData tradedPokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.PokemonData TradedPokemon {
      get { return tradedPokemon_; }
      set {
        tradedPokemon_ = value;
      }
    }

    /// <summary>Field number for the "pokeball" field.</summary>
    public const int PokeballFieldNumber = 15;
    private global::POGOProtos.Inventory.Item.ItemData pokeball_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Inventory.Item.ItemData Pokeball {
      get { return pokeball_; }
      set {
        pokeball_ = value;
      }
    }

    /// <summary>Field number for the "individual_attack" field.</summary>
    public const int IndividualAttackFieldNumber = 16;
    private int individualAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualAttack {
      get { return individualAttack_; }
      set {
        individualAttack_ = value;
      }
    }

    /// <summary>Field number for the "individual_defense" field.</summary>
    public const int IndividualDefenseFieldNumber = 17;
    private int individualDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualDefense {
      get { return individualDefense_; }
      set {
        individualDefense_ = value;
      }
    }

    /// <summary>Field number for the "individual_stamina" field.</summary>
    public const int IndividualStaminaFieldNumber = 18;
    private int individualStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualStamina {
      get { return individualStamina_; }
      set {
        individualStamina_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 19;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradingPokemon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradingPokemon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokemonId != other.PokemonId) return false;
      if (PokedexEntryNumber != other.PokedexEntryNumber) return false;
      if (OriginalCp != other.OriginalCp) return false;
      if (AdjustedCpMin != other.AdjustedCpMin) return false;
      if (AdjustedCpMax != other.AdjustedCpMax) return false;
      if (OriginalStamina != other.OriginalStamina) return false;
      if (AdjustedStaminaMin != other.AdjustedStaminaMin) return false;
      if (AdjustedStaminaMax != other.AdjustedStaminaMax) return false;
      if (FriendLevelCap != other.FriendLevelCap) return false;
      if (Move1 != other.Move1) return false;
      if (Move2 != other.Move2) return false;
      if (!object.Equals(PokemonDisplay, other.PokemonDisplay)) return false;
      if (CapturedS2CellId != other.CapturedS2CellId) return false;
      if (!object.Equals(TradedPokemon, other.TradedPokemon)) return false;
      if (!object.Equals(Pokeball, other.Pokeball)) return false;
      if (IndividualAttack != other.IndividualAttack) return false;
      if (IndividualDefense != other.IndividualDefense) return false;
      if (IndividualStamina != other.IndividualStamina) return false;
      if (Nickname != other.Nickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PokemonId != 0UL) hash ^= PokemonId.GetHashCode();
      if (PokedexEntryNumber != 0) hash ^= PokedexEntryNumber.GetHashCode();
      if (OriginalCp != 0) hash ^= OriginalCp.GetHashCode();
      if (AdjustedCpMin != 0) hash ^= AdjustedCpMin.GetHashCode();
      if (AdjustedCpMax != 0) hash ^= AdjustedCpMax.GetHashCode();
      if (OriginalStamina != 0) hash ^= OriginalStamina.GetHashCode();
      if (AdjustedStaminaMin != 0) hash ^= AdjustedStaminaMin.GetHashCode();
      if (AdjustedStaminaMax != 0) hash ^= AdjustedStaminaMax.GetHashCode();
      if (FriendLevelCap != false) hash ^= FriendLevelCap.GetHashCode();
      if (Move1 != 0) hash ^= Move1.GetHashCode();
      if (Move2 != 0) hash ^= Move2.GetHashCode();
      if (pokemonDisplay_ != null) hash ^= PokemonDisplay.GetHashCode();
      if (CapturedS2CellId != 0L) hash ^= CapturedS2CellId.GetHashCode();
      if (tradedPokemon_ != null) hash ^= TradedPokemon.GetHashCode();
      if (pokeball_ != null) hash ^= Pokeball.GetHashCode();
      if (IndividualAttack != 0) hash ^= IndividualAttack.GetHashCode();
      if (IndividualDefense != 0) hash ^= IndividualDefense.GetHashCode();
      if (IndividualStamina != 0) hash ^= IndividualStamina.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PokemonId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(PokemonId);
      }
      if (PokedexEntryNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PokedexEntryNumber);
      }
      if (OriginalCp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginalCp);
      }
      if (AdjustedCpMin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AdjustedCpMin);
      }
      if (AdjustedCpMax != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AdjustedCpMax);
      }
      if (OriginalStamina != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OriginalStamina);
      }
      if (AdjustedStaminaMin != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AdjustedStaminaMin);
      }
      if (AdjustedStaminaMax != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AdjustedStaminaMax);
      }
      if (FriendLevelCap != false) {
        output.WriteRawTag(72);
        output.WriteBool(FriendLevelCap);
      }
      if (Move1 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Move1);
      }
      if (Move2 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Move2);
      }
      if (pokemonDisplay_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PokemonDisplay);
      }
      if (CapturedS2CellId != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(CapturedS2CellId);
      }
      if (tradedPokemon_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TradedPokemon);
      }
      if (pokeball_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Pokeball);
      }
      if (IndividualAttack != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(IndividualAttack);
      }
      if (IndividualDefense != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(IndividualDefense);
      }
      if (IndividualStamina != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(IndividualStamina);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PokemonId != 0UL) {
        size += 1 + 8;
      }
      if (PokedexEntryNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokedexEntryNumber);
      }
      if (OriginalCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginalCp);
      }
      if (AdjustedCpMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdjustedCpMin);
      }
      if (AdjustedCpMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdjustedCpMax);
      }
      if (OriginalStamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginalStamina);
      }
      if (AdjustedStaminaMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdjustedStaminaMin);
      }
      if (AdjustedStaminaMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdjustedStaminaMax);
      }
      if (FriendLevelCap != false) {
        size += 1 + 1;
      }
      if (Move1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move1);
      }
      if (Move2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move2);
      }
      if (pokemonDisplay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PokemonDisplay);
      }
      if (CapturedS2CellId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CapturedS2CellId);
      }
      if (tradedPokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradedPokemon);
      }
      if (pokeball_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pokeball);
      }
      if (IndividualAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualAttack);
      }
      if (IndividualDefense != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualDefense);
      }
      if (IndividualStamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualStamina);
      }
      if (Nickname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradingPokemon other) {
      if (other == null) {
        return;
      }
      if (other.PokemonId != 0UL) {
        PokemonId = other.PokemonId;
      }
      if (other.PokedexEntryNumber != 0) {
        PokedexEntryNumber = other.PokedexEntryNumber;
      }
      if (other.OriginalCp != 0) {
        OriginalCp = other.OriginalCp;
      }
      if (other.AdjustedCpMin != 0) {
        AdjustedCpMin = other.AdjustedCpMin;
      }
      if (other.AdjustedCpMax != 0) {
        AdjustedCpMax = other.AdjustedCpMax;
      }
      if (other.OriginalStamina != 0) {
        OriginalStamina = other.OriginalStamina;
      }
      if (other.AdjustedStaminaMin != 0) {
        AdjustedStaminaMin = other.AdjustedStaminaMin;
      }
      if (other.AdjustedStaminaMax != 0) {
        AdjustedStaminaMax = other.AdjustedStaminaMax;
      }
      if (other.FriendLevelCap != false) {
        FriendLevelCap = other.FriendLevelCap;
      }
      if (other.Move1 != 0) {
        Move1 = other.Move1;
      }
      if (other.Move2 != 0) {
        Move2 = other.Move2;
      }
      if (other.pokemonDisplay_ != null) {
        if (pokemonDisplay_ == null) {
          pokemonDisplay_ = new global::POGOProtos.Data.PokemonDisplay();
        }
        PokemonDisplay.MergeFrom(other.PokemonDisplay);
      }
      if (other.CapturedS2CellId != 0L) {
        CapturedS2CellId = other.CapturedS2CellId;
      }
      if (other.tradedPokemon_ != null) {
        if (tradedPokemon_ == null) {
          tradedPokemon_ = new global::POGOProtos.Data.PokemonData();
        }
        TradedPokemon.MergeFrom(other.TradedPokemon);
      }
      if (other.pokeball_ != null) {
        if (pokeball_ == null) {
          pokeball_ = new global::POGOProtos.Inventory.Item.ItemData();
        }
        Pokeball.MergeFrom(other.Pokeball);
      }
      if (other.IndividualAttack != 0) {
        IndividualAttack = other.IndividualAttack;
      }
      if (other.IndividualDefense != 0) {
        IndividualDefense = other.IndividualDefense;
      }
      if (other.IndividualStamina != 0) {
        IndividualStamina = other.IndividualStamina;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            PokemonId = input.ReadFixed64();
            break;
          }
          case 16: {
            PokedexEntryNumber = input.ReadInt32();
            break;
          }
          case 24: {
            OriginalCp = input.ReadInt32();
            break;
          }
          case 32: {
            AdjustedCpMin = input.ReadInt32();
            break;
          }
          case 40: {
            AdjustedCpMax = input.ReadInt32();
            break;
          }
          case 48: {
            OriginalStamina = input.ReadInt32();
            break;
          }
          case 56: {
            AdjustedStaminaMin = input.ReadInt32();
            break;
          }
          case 64: {
            AdjustedStaminaMax = input.ReadInt32();
            break;
          }
          case 72: {
            FriendLevelCap = input.ReadBool();
            break;
          }
          case 80: {
            Move1 = input.ReadInt32();
            break;
          }
          case 88: {
            Move2 = input.ReadInt32();
            break;
          }
          case 98: {
            if (pokemonDisplay_ == null) {
              pokemonDisplay_ = new global::POGOProtos.Data.PokemonDisplay();
            }
            input.ReadMessage(pokemonDisplay_);
            break;
          }
          case 104: {
            CapturedS2CellId = input.ReadInt64();
            break;
          }
          case 114: {
            if (tradedPokemon_ == null) {
              tradedPokemon_ = new global::POGOProtos.Data.PokemonData();
            }
            input.ReadMessage(tradedPokemon_);
            break;
          }
          case 122: {
            if (pokeball_ == null) {
              pokeball_ = new global::POGOProtos.Inventory.Item.ItemData();
            }
            input.ReadMessage(pokeball_);
            break;
          }
          case 128: {
            IndividualAttack = input.ReadInt32();
            break;
          }
          case 136: {
            IndividualDefense = input.ReadInt32();
            break;
          }
          case 144: {
            IndividualStamina = input.ReadInt32();
            break;
          }
          case 154: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
