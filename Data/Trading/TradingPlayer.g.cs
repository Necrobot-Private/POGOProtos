// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Data/Trading/TradingPlayer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data.Trading {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/Trading/TradingPlayer.proto</summary>
  public static partial class TradingPlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/Trading/TradingPlayer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TradingPlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitQT0dPUHJvdG9zL0RhdGEvVHJhZGluZy9UcmFkaW5nUGxheWVyLnByb3Rv",
            "EhdQT0dPUHJvdG9zLkRhdGEuVHJhZGluZxofUE9HT1Byb3Rvcy9JbnZlbnRv",
            "cnkvTG9vdC5wcm90bxowUE9HT1Byb3Rvcy9EYXRhL1BsYXllci9QbGF5ZXJQ",
            "dWJsaWNQcm9maWxlLnByb3RvGixQT0dPUHJvdG9zL0RhdGEvVHJhZGluZy9U",
            "cmFkaW5nUG9rZW1vbi5wcm90bxotUE9HT1Byb3Rvcy9EYXRhL1RyYWRpbmcv",
            "RXhjbHVkZWRQb2tlbW9uLnByb3RvIvYCCg1UcmFkaW5nUGxheWVyEhEKCXBs",
            "YXllcl9pZBgBIAEoCRJDCg5wdWJsaWNfcHJvZmlsZRgCIAEoCzIrLlBPR09Q",
            "cm90b3MuRGF0YS5QbGF5ZXIuUGxheWVyUHVibGljUHJvZmlsZRJCChBleGNs",
            "dWRlZF9wb2tlbW9uGAMgAygLMiguUE9HT1Byb3Rvcy5EYXRhLlRyYWRpbmcu",
            "RXhjbHVkZWRQb2tlbW9uEkAKD3RyYWRpbmdfcG9rZW1vbhgEIAEoCzInLlBP",
            "R09Qcm90b3MuRGF0YS5UcmFkaW5nLlRyYWRpbmdQb2tlbW9uEikKBWJvbnVz",
            "GAUgASgLMhouUE9HT1Byb3Rvcy5JbnZlbnRvcnkuTG9vdBIpCgVwcmljZRgG",
            "IAEoCzIaLlBPR09Qcm90b3MuSW52ZW50b3J5Lkxvb3QSGgoSY2FuX2FmZm9y",
            "ZF90cmFkaW5nGAcgASgIEhUKDWhhc19jb25maXJtZWQYCCABKAhiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Inventory.LootReflection.Descriptor, global::POGOProtos.Data.Player.PlayerPublicProfileReflection.Descriptor, global::POGOProtos.Data.Trading.TradingPokemonReflection.Descriptor, global::POGOProtos.Data.Trading.ExcludedPokemonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Trading.TradingPlayer), global::POGOProtos.Data.Trading.TradingPlayer.Parser, new[]{ "PlayerId", "PublicProfile", "ExcludedPokemon", "TradingPokemon", "Bonus", "Price", "CanAffordTrading", "HasConfirmed" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TradingPlayer : pb::IMessage<TradingPlayer> {
    private static readonly pb::MessageParser<TradingPlayer> _parser = new pb::MessageParser<TradingPlayer>(() => new TradingPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradingPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.Trading.TradingPlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingPlayer(TradingPlayer other) : this() {
      playerId_ = other.playerId_;
      publicProfile_ = other.publicProfile_ != null ? other.publicProfile_.Clone() : null;
      excludedPokemon_ = other.excludedPokemon_.Clone();
      tradingPokemon_ = other.tradingPokemon_ != null ? other.tradingPokemon_.Clone() : null;
      bonus_ = other.bonus_ != null ? other.bonus_.Clone() : null;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      canAffordTrading_ = other.canAffordTrading_;
      hasConfirmed_ = other.hasConfirmed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingPlayer Clone() {
      return new TradingPlayer(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_profile" field.</summary>
    public const int PublicProfileFieldNumber = 2;
    private global::POGOProtos.Data.Player.PlayerPublicProfile publicProfile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Player.PlayerPublicProfile PublicProfile {
      get { return publicProfile_; }
      set {
        publicProfile_ = value;
      }
    }

    /// <summary>Field number for the "excluded_pokemon" field.</summary>
    public const int ExcludedPokemonFieldNumber = 3;
    private static readonly pb::FieldCodec<global::POGOProtos.Data.Trading.ExcludedPokemon> _repeated_excludedPokemon_codec
        = pb::FieldCodec.ForMessage(26, global::POGOProtos.Data.Trading.ExcludedPokemon.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Data.Trading.ExcludedPokemon> excludedPokemon_ = new pbc::RepeatedField<global::POGOProtos.Data.Trading.ExcludedPokemon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Data.Trading.ExcludedPokemon> ExcludedPokemon {
      get { return excludedPokemon_; }
    }

    /// <summary>Field number for the "trading_pokemon" field.</summary>
    public const int TradingPokemonFieldNumber = 4;
    private global::POGOProtos.Data.Trading.TradingPokemon tradingPokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Trading.TradingPokemon TradingPokemon {
      get { return tradingPokemon_; }
      set {
        tradingPokemon_ = value;
      }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 5;
    private global::POGOProtos.Inventory.Loot bonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Inventory.Loot Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 6;
    private global::POGOProtos.Inventory.Loot price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Inventory.Loot Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "can_afford_trading" field.</summary>
    public const int CanAffordTradingFieldNumber = 7;
    private bool canAffordTrading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanAffordTrading {
      get { return canAffordTrading_; }
      set {
        canAffordTrading_ = value;
      }
    }

    /// <summary>Field number for the "has_confirmed" field.</summary>
    public const int HasConfirmedFieldNumber = 8;
    private bool hasConfirmed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfirmed {
      get { return hasConfirmed_; }
      set {
        hasConfirmed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradingPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradingPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(PublicProfile, other.PublicProfile)) return false;
      if(!excludedPokemon_.Equals(other.excludedPokemon_)) return false;
      if (!object.Equals(TradingPokemon, other.TradingPokemon)) return false;
      if (!object.Equals(Bonus, other.Bonus)) return false;
      if (!object.Equals(Price, other.Price)) return false;
      if (CanAffordTrading != other.CanAffordTrading) return false;
      if (HasConfirmed != other.HasConfirmed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (publicProfile_ != null) hash ^= PublicProfile.GetHashCode();
      hash ^= excludedPokemon_.GetHashCode();
      if (tradingPokemon_ != null) hash ^= TradingPokemon.GetHashCode();
      if (bonus_ != null) hash ^= Bonus.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (CanAffordTrading != false) hash ^= CanAffordTrading.GetHashCode();
      if (HasConfirmed != false) hash ^= HasConfirmed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (publicProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PublicProfile);
      }
      excludedPokemon_.WriteTo(output, _repeated_excludedPokemon_codec);
      if (tradingPokemon_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TradingPokemon);
      }
      if (bonus_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Bonus);
      }
      if (price_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Price);
      }
      if (CanAffordTrading != false) {
        output.WriteRawTag(56);
        output.WriteBool(CanAffordTrading);
      }
      if (HasConfirmed != false) {
        output.WriteRawTag(64);
        output.WriteBool(HasConfirmed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (publicProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicProfile);
      }
      size += excludedPokemon_.CalculateSize(_repeated_excludedPokemon_codec);
      if (tradingPokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradingPokemon);
      }
      if (bonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bonus);
      }
      if (price_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (CanAffordTrading != false) {
        size += 1 + 1;
      }
      if (HasConfirmed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradingPlayer other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.publicProfile_ != null) {
        if (publicProfile_ == null) {
          publicProfile_ = new global::POGOProtos.Data.Player.PlayerPublicProfile();
        }
        PublicProfile.MergeFrom(other.PublicProfile);
      }
      excludedPokemon_.Add(other.excludedPokemon_);
      if (other.tradingPokemon_ != null) {
        if (tradingPokemon_ == null) {
          tradingPokemon_ = new global::POGOProtos.Data.Trading.TradingPokemon();
        }
        TradingPokemon.MergeFrom(other.TradingPokemon);
      }
      if (other.bonus_ != null) {
        if (bonus_ == null) {
          bonus_ = new global::POGOProtos.Inventory.Loot();
        }
        Bonus.MergeFrom(other.Bonus);
      }
      if (other.price_ != null) {
        if (price_ == null) {
          price_ = new global::POGOProtos.Inventory.Loot();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.CanAffordTrading != false) {
        CanAffordTrading = other.CanAffordTrading;
      }
      if (other.HasConfirmed != false) {
        HasConfirmed = other.HasConfirmed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            if (publicProfile_ == null) {
              publicProfile_ = new global::POGOProtos.Data.Player.PlayerPublicProfile();
            }
            input.ReadMessage(publicProfile_);
            break;
          }
          case 26: {
            excludedPokemon_.AddEntriesFrom(input, _repeated_excludedPokemon_codec);
            break;
          }
          case 34: {
            if (tradingPokemon_ == null) {
              tradingPokemon_ = new global::POGOProtos.Data.Trading.TradingPokemon();
            }
            input.ReadMessage(tradingPokemon_);
            break;
          }
          case 42: {
            if (bonus_ == null) {
              bonus_ = new global::POGOProtos.Inventory.Loot();
            }
            input.ReadMessage(bonus_);
            break;
          }
          case 50: {
            if (price_ == null) {
              price_ = new global::POGOProtos.Inventory.Loot();
            }
            input.ReadMessage(price_);
            break;
          }
          case 56: {
            CanAffordTrading = input.ReadBool();
            break;
          }
          case 64: {
            HasConfirmed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
