// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Data/Logs/ActionLogEntry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data.Logs {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/Logs/ActionLogEntry.proto</summary>
  public static partial class ActionLogEntryReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/Logs/ActionLogEntry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ActionLogEntryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilQT0dPUHJvdG9zL0RhdGEvTG9ncy9BY3Rpb25Mb2dFbnRyeS5wcm90bxIU",
            "UE9HT1Byb3Rvcy5EYXRhLkxvZ3MaL1BPR09Qcm90b3MvRGF0YS9Mb2dzL0Nh",
            "dGNoUG9rZW1vbkxvZ0VudHJ5LnByb3RvGi1QT0dPUHJvdG9zL0RhdGEvTG9n",
            "cy9Gb3J0U2VhcmNoTG9nRW50cnkucHJvdG8aL1BPR09Qcm90b3MvRGF0YS9M",
            "b2dzL0J1ZGR5UG9rZW1vbkxvZ0VudHJ5LnByb3RvGi5QT0dPUHJvdG9zL0Rh",
            "dGEvTG9ncy9SYWlkUmV3YXJkc0xvZ0VudHJ5LnByb3RvGjJQT0dPUHJvdG9z",
            "L0RhdGEvTG9ncy9QYXNzY29kZVJld2FyZHNMb2dFbnRyeS5wcm90bxowUE9H",
            "T1Byb3Rvcy9EYXRhL0xvZ3MvQ29tcGxldGVRdWVzdExvZ0VudHJ5LnByb3Rv",
            "GjlQT0dPUHJvdG9zL0RhdGEvTG9ncy9Db21wbGV0ZVF1ZXN0U3RhbXBDYXJk",
            "TG9nRW50cnkucHJvdG8aQFBPR09Qcm90b3MvRGF0YS9Mb2dzL0NvbXBsZXRl",
            "UXVlc3RQb2tlbW9uRW5jb3VudGVyTG9nRW50cnkucHJvdG8iowUKDkFjdGlv",
            "bkxvZ0VudHJ5EhQKDHRpbWVzdGFtcF9tcxgBIAEoAxINCgVzZmlkYRgCIAEo",
            "CBJDCg1jYXRjaF9wb2tlbW9uGAMgASgLMiouUE9HT1Byb3Rvcy5EYXRhLkxv",
            "Z3MuQ2F0Y2hQb2tlbW9uTG9nRW50cnlIABI/Cgtmb3J0X3NlYXJjaBgEIAEo",
            "CzIoLlBPR09Qcm90b3MuRGF0YS5Mb2dzLkZvcnRTZWFyY2hMb2dFbnRyeUgA",
            "EkMKDWJ1ZGR5X3Bva2Vtb24YBSABKAsyKi5QT0dPUHJvdG9zLkRhdGEuTG9n",
            "cy5CdWRkeVBva2Vtb25Mb2dFbnRyeUgAEkEKDHJhaWRfcmV3YXJkcxgGIAEo",
            "CzIpLlBPR09Qcm90b3MuRGF0YS5Mb2dzLlJhaWRSZXdhcmRzTG9nRW50cnlI",
            "ABJJChBwYXNzY29kZV9yZXdhcmRzGAcgASgLMi0uUE9HT1Byb3Rvcy5EYXRh",
            "LkxvZ3MuUGFzc2NvZGVSZXdhcmRzTG9nRW50cnlIABJFCg5jb21wbGV0ZV9x",
            "dWVzdBgIIAEoCzIrLlBPR09Qcm90b3MuRGF0YS5Mb2dzLkNvbXBsZXRlUXVl",
            "c3RMb2dFbnRyeUgAElkKGWNvbXBsZXRlX3F1ZXN0X3N0YW1wX2NhcmQYCSAB",
            "KAsyNC5QT0dPUHJvdG9zLkRhdGEuTG9ncy5Db21wbGV0ZVF1ZXN0U3RhbXBD",
            "YXJkTG9nRW50cnlIABJnCiBjb21wbGV0ZV9xdWVzdF9wb2tlbW9uX2VuY291",
            "bnRlchgKIAEoCzI7LlBPR09Qcm90b3MuRGF0YS5Mb2dzLkNvbXBsZXRlUXVl",
            "c3RQb2tlbW9uRW5jb3VudGVyTG9nRW50cnlIAEIICgZBY3Rpb25iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Data.Logs.CatchPokemonLogEntryReflection.Descriptor, global::POGOProtos.Data.Logs.FortSearchLogEntryReflection.Descriptor, global::POGOProtos.Data.Logs.BuddyPokemonLogEntryReflection.Descriptor, global::POGOProtos.Data.Logs.RaidRewardsLogEntryReflection.Descriptor, global::POGOProtos.Data.Logs.PasscodeRewardsLogEntryReflection.Descriptor, global::POGOProtos.Data.Logs.CompleteQuestLogEntryReflection.Descriptor, global::POGOProtos.Data.Logs.CompleteQuestStampCardLogEntryReflection.Descriptor, global::POGOProtos.Data.Logs.CompleteQuestPokemonEncounterLogEntryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Logs.ActionLogEntry), global::POGOProtos.Data.Logs.ActionLogEntry.Parser, new[]{ "TimestampMs", "Sfida", "CatchPokemon", "FortSearch", "BuddyPokemon", "RaidRewards", "PasscodeRewards", "CompleteQuest", "CompleteQuestStampCard", "CompleteQuestPokemonEncounter" }, new[]{ "Action" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ActionLogEntry : pb::IMessage<ActionLogEntry> {
    private static readonly pb::MessageParser<ActionLogEntry> _parser = new pb::MessageParser<ActionLogEntry>(() => new ActionLogEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.Logs.ActionLogEntryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionLogEntry(ActionLogEntry other) : this() {
      timestampMs_ = other.timestampMs_;
      sfida_ = other.sfida_;
      switch (other.ActionCase) {
        case ActionOneofCase.CatchPokemon:
          CatchPokemon = other.CatchPokemon.Clone();
          break;
        case ActionOneofCase.FortSearch:
          FortSearch = other.FortSearch.Clone();
          break;
        case ActionOneofCase.BuddyPokemon:
          BuddyPokemon = other.BuddyPokemon.Clone();
          break;
        case ActionOneofCase.RaidRewards:
          RaidRewards = other.RaidRewards.Clone();
          break;
        case ActionOneofCase.PasscodeRewards:
          PasscodeRewards = other.PasscodeRewards.Clone();
          break;
        case ActionOneofCase.CompleteQuest:
          CompleteQuest = other.CompleteQuest.Clone();
          break;
        case ActionOneofCase.CompleteQuestStampCard:
          CompleteQuestStampCard = other.CompleteQuestStampCard.Clone();
          break;
        case ActionOneofCase.CompleteQuestPokemonEncounter:
          CompleteQuestPokemonEncounter = other.CompleteQuestPokemonEncounter.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionLogEntry Clone() {
      return new ActionLogEntry(this);
    }

    /// <summary>Field number for the "timestamp_ms" field.</summary>
    public const int TimestampMsFieldNumber = 1;
    private long timestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimestampMs {
      get { return timestampMs_; }
      set {
        timestampMs_ = value;
      }
    }

    /// <summary>Field number for the "sfida" field.</summary>
    public const int SfidaFieldNumber = 2;
    private bool sfida_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sfida {
      get { return sfida_; }
      set {
        sfida_ = value;
      }
    }

    /// <summary>Field number for the "catch_pokemon" field.</summary>
    public const int CatchPokemonFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Logs.CatchPokemonLogEntry CatchPokemon {
      get { return actionCase_ == ActionOneofCase.CatchPokemon ? (global::POGOProtos.Data.Logs.CatchPokemonLogEntry) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CatchPokemon;
      }
    }

    /// <summary>Field number for the "fort_search" field.</summary>
    public const int FortSearchFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Logs.FortSearchLogEntry FortSearch {
      get { return actionCase_ == ActionOneofCase.FortSearch ? (global::POGOProtos.Data.Logs.FortSearchLogEntry) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.FortSearch;
      }
    }

    /// <summary>Field number for the "buddy_pokemon" field.</summary>
    public const int BuddyPokemonFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Logs.BuddyPokemonLogEntry BuddyPokemon {
      get { return actionCase_ == ActionOneofCase.BuddyPokemon ? (global::POGOProtos.Data.Logs.BuddyPokemonLogEntry) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.BuddyPokemon;
      }
    }

    /// <summary>Field number for the "raid_rewards" field.</summary>
    public const int RaidRewardsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Logs.RaidRewardsLogEntry RaidRewards {
      get { return actionCase_ == ActionOneofCase.RaidRewards ? (global::POGOProtos.Data.Logs.RaidRewardsLogEntry) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.RaidRewards;
      }
    }

    /// <summary>Field number for the "passcode_rewards" field.</summary>
    public const int PasscodeRewardsFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Logs.PasscodeRewardsLogEntry PasscodeRewards {
      get { return actionCase_ == ActionOneofCase.PasscodeRewards ? (global::POGOProtos.Data.Logs.PasscodeRewardsLogEntry) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.PasscodeRewards;
      }
    }

    /// <summary>Field number for the "complete_quest" field.</summary>
    public const int CompleteQuestFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Logs.CompleteQuestLogEntry CompleteQuest {
      get { return actionCase_ == ActionOneofCase.CompleteQuest ? (global::POGOProtos.Data.Logs.CompleteQuestLogEntry) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CompleteQuest;
      }
    }

    /// <summary>Field number for the "complete_quest_stamp_card" field.</summary>
    public const int CompleteQuestStampCardFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Logs.CompleteQuestStampCardLogEntry CompleteQuestStampCard {
      get { return actionCase_ == ActionOneofCase.CompleteQuestStampCard ? (global::POGOProtos.Data.Logs.CompleteQuestStampCardLogEntry) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CompleteQuestStampCard;
      }
    }

    /// <summary>Field number for the "complete_quest_pokemon_encounter" field.</summary>
    public const int CompleteQuestPokemonEncounterFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Logs.CompleteQuestPokemonEncounterLogEntry CompleteQuestPokemonEncounter {
      get { return actionCase_ == ActionOneofCase.CompleteQuestPokemonEncounter ? (global::POGOProtos.Data.Logs.CompleteQuestPokemonEncounterLogEntry) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CompleteQuestPokemonEncounter;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "Action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      CatchPokemon = 3,
      FortSearch = 4,
      BuddyPokemon = 5,
      RaidRewards = 6,
      PasscodeRewards = 7,
      CompleteQuest = 8,
      CompleteQuestStampCard = 9,
      CompleteQuestPokemonEncounter = 10,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimestampMs != other.TimestampMs) return false;
      if (Sfida != other.Sfida) return false;
      if (!object.Equals(CatchPokemon, other.CatchPokemon)) return false;
      if (!object.Equals(FortSearch, other.FortSearch)) return false;
      if (!object.Equals(BuddyPokemon, other.BuddyPokemon)) return false;
      if (!object.Equals(RaidRewards, other.RaidRewards)) return false;
      if (!object.Equals(PasscodeRewards, other.PasscodeRewards)) return false;
      if (!object.Equals(CompleteQuest, other.CompleteQuest)) return false;
      if (!object.Equals(CompleteQuestStampCard, other.CompleteQuestStampCard)) return false;
      if (!object.Equals(CompleteQuestPokemonEncounter, other.CompleteQuestPokemonEncounter)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimestampMs != 0L) hash ^= TimestampMs.GetHashCode();
      if (Sfida != false) hash ^= Sfida.GetHashCode();
      if (actionCase_ == ActionOneofCase.CatchPokemon) hash ^= CatchPokemon.GetHashCode();
      if (actionCase_ == ActionOneofCase.FortSearch) hash ^= FortSearch.GetHashCode();
      if (actionCase_ == ActionOneofCase.BuddyPokemon) hash ^= BuddyPokemon.GetHashCode();
      if (actionCase_ == ActionOneofCase.RaidRewards) hash ^= RaidRewards.GetHashCode();
      if (actionCase_ == ActionOneofCase.PasscodeRewards) hash ^= PasscodeRewards.GetHashCode();
      if (actionCase_ == ActionOneofCase.CompleteQuest) hash ^= CompleteQuest.GetHashCode();
      if (actionCase_ == ActionOneofCase.CompleteQuestStampCard) hash ^= CompleteQuestStampCard.GetHashCode();
      if (actionCase_ == ActionOneofCase.CompleteQuestPokemonEncounter) hash ^= CompleteQuestPokemonEncounter.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimestampMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TimestampMs);
      }
      if (Sfida != false) {
        output.WriteRawTag(16);
        output.WriteBool(Sfida);
      }
      if (actionCase_ == ActionOneofCase.CatchPokemon) {
        output.WriteRawTag(26);
        output.WriteMessage(CatchPokemon);
      }
      if (actionCase_ == ActionOneofCase.FortSearch) {
        output.WriteRawTag(34);
        output.WriteMessage(FortSearch);
      }
      if (actionCase_ == ActionOneofCase.BuddyPokemon) {
        output.WriteRawTag(42);
        output.WriteMessage(BuddyPokemon);
      }
      if (actionCase_ == ActionOneofCase.RaidRewards) {
        output.WriteRawTag(50);
        output.WriteMessage(RaidRewards);
      }
      if (actionCase_ == ActionOneofCase.PasscodeRewards) {
        output.WriteRawTag(58);
        output.WriteMessage(PasscodeRewards);
      }
      if (actionCase_ == ActionOneofCase.CompleteQuest) {
        output.WriteRawTag(66);
        output.WriteMessage(CompleteQuest);
      }
      if (actionCase_ == ActionOneofCase.CompleteQuestStampCard) {
        output.WriteRawTag(74);
        output.WriteMessage(CompleteQuestStampCard);
      }
      if (actionCase_ == ActionOneofCase.CompleteQuestPokemonEncounter) {
        output.WriteRawTag(82);
        output.WriteMessage(CompleteQuestPokemonEncounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampMs);
      }
      if (Sfida != false) {
        size += 1 + 1;
      }
      if (actionCase_ == ActionOneofCase.CatchPokemon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CatchPokemon);
      }
      if (actionCase_ == ActionOneofCase.FortSearch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FortSearch);
      }
      if (actionCase_ == ActionOneofCase.BuddyPokemon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuddyPokemon);
      }
      if (actionCase_ == ActionOneofCase.RaidRewards) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RaidRewards);
      }
      if (actionCase_ == ActionOneofCase.PasscodeRewards) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PasscodeRewards);
      }
      if (actionCase_ == ActionOneofCase.CompleteQuest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompleteQuest);
      }
      if (actionCase_ == ActionOneofCase.CompleteQuestStampCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompleteQuestStampCard);
      }
      if (actionCase_ == ActionOneofCase.CompleteQuestPokemonEncounter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompleteQuestPokemonEncounter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.TimestampMs != 0L) {
        TimestampMs = other.TimestampMs;
      }
      if (other.Sfida != false) {
        Sfida = other.Sfida;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.CatchPokemon:
          if (CatchPokemon == null) {
            CatchPokemon = new global::POGOProtos.Data.Logs.CatchPokemonLogEntry();
          }
          CatchPokemon.MergeFrom(other.CatchPokemon);
          break;
        case ActionOneofCase.FortSearch:
          if (FortSearch == null) {
            FortSearch = new global::POGOProtos.Data.Logs.FortSearchLogEntry();
          }
          FortSearch.MergeFrom(other.FortSearch);
          break;
        case ActionOneofCase.BuddyPokemon:
          if (BuddyPokemon == null) {
            BuddyPokemon = new global::POGOProtos.Data.Logs.BuddyPokemonLogEntry();
          }
          BuddyPokemon.MergeFrom(other.BuddyPokemon);
          break;
        case ActionOneofCase.RaidRewards:
          if (RaidRewards == null) {
            RaidRewards = new global::POGOProtos.Data.Logs.RaidRewardsLogEntry();
          }
          RaidRewards.MergeFrom(other.RaidRewards);
          break;
        case ActionOneofCase.PasscodeRewards:
          if (PasscodeRewards == null) {
            PasscodeRewards = new global::POGOProtos.Data.Logs.PasscodeRewardsLogEntry();
          }
          PasscodeRewards.MergeFrom(other.PasscodeRewards);
          break;
        case ActionOneofCase.CompleteQuest:
          if (CompleteQuest == null) {
            CompleteQuest = new global::POGOProtos.Data.Logs.CompleteQuestLogEntry();
          }
          CompleteQuest.MergeFrom(other.CompleteQuest);
          break;
        case ActionOneofCase.CompleteQuestStampCard:
          if (CompleteQuestStampCard == null) {
            CompleteQuestStampCard = new global::POGOProtos.Data.Logs.CompleteQuestStampCardLogEntry();
          }
          CompleteQuestStampCard.MergeFrom(other.CompleteQuestStampCard);
          break;
        case ActionOneofCase.CompleteQuestPokemonEncounter:
          if (CompleteQuestPokemonEncounter == null) {
            CompleteQuestPokemonEncounter = new global::POGOProtos.Data.Logs.CompleteQuestPokemonEncounterLogEntry();
          }
          CompleteQuestPokemonEncounter.MergeFrom(other.CompleteQuestPokemonEncounter);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimestampMs = input.ReadInt64();
            break;
          }
          case 16: {
            Sfida = input.ReadBool();
            break;
          }
          case 26: {
            global::POGOProtos.Data.Logs.CatchPokemonLogEntry subBuilder = new global::POGOProtos.Data.Logs.CatchPokemonLogEntry();
            if (actionCase_ == ActionOneofCase.CatchPokemon) {
              subBuilder.MergeFrom(CatchPokemon);
            }
            input.ReadMessage(subBuilder);
            CatchPokemon = subBuilder;
            break;
          }
          case 34: {
            global::POGOProtos.Data.Logs.FortSearchLogEntry subBuilder = new global::POGOProtos.Data.Logs.FortSearchLogEntry();
            if (actionCase_ == ActionOneofCase.FortSearch) {
              subBuilder.MergeFrom(FortSearch);
            }
            input.ReadMessage(subBuilder);
            FortSearch = subBuilder;
            break;
          }
          case 42: {
            global::POGOProtos.Data.Logs.BuddyPokemonLogEntry subBuilder = new global::POGOProtos.Data.Logs.BuddyPokemonLogEntry();
            if (actionCase_ == ActionOneofCase.BuddyPokemon) {
              subBuilder.MergeFrom(BuddyPokemon);
            }
            input.ReadMessage(subBuilder);
            BuddyPokemon = subBuilder;
            break;
          }
          case 50: {
            global::POGOProtos.Data.Logs.RaidRewardsLogEntry subBuilder = new global::POGOProtos.Data.Logs.RaidRewardsLogEntry();
            if (actionCase_ == ActionOneofCase.RaidRewards) {
              subBuilder.MergeFrom(RaidRewards);
            }
            input.ReadMessage(subBuilder);
            RaidRewards = subBuilder;
            break;
          }
          case 58: {
            global::POGOProtos.Data.Logs.PasscodeRewardsLogEntry subBuilder = new global::POGOProtos.Data.Logs.PasscodeRewardsLogEntry();
            if (actionCase_ == ActionOneofCase.PasscodeRewards) {
              subBuilder.MergeFrom(PasscodeRewards);
            }
            input.ReadMessage(subBuilder);
            PasscodeRewards = subBuilder;
            break;
          }
          case 66: {
            global::POGOProtos.Data.Logs.CompleteQuestLogEntry subBuilder = new global::POGOProtos.Data.Logs.CompleteQuestLogEntry();
            if (actionCase_ == ActionOneofCase.CompleteQuest) {
              subBuilder.MergeFrom(CompleteQuest);
            }
            input.ReadMessage(subBuilder);
            CompleteQuest = subBuilder;
            break;
          }
          case 74: {
            global::POGOProtos.Data.Logs.CompleteQuestStampCardLogEntry subBuilder = new global::POGOProtos.Data.Logs.CompleteQuestStampCardLogEntry();
            if (actionCase_ == ActionOneofCase.CompleteQuestStampCard) {
              subBuilder.MergeFrom(CompleteQuestStampCard);
            }
            input.ReadMessage(subBuilder);
            CompleteQuestStampCard = subBuilder;
            break;
          }
          case 82: {
            global::POGOProtos.Data.Logs.CompleteQuestPokemonEncounterLogEntry subBuilder = new global::POGOProtos.Data.Logs.CompleteQuestPokemonEncounterLogEntry();
            if (actionCase_ == ActionOneofCase.CompleteQuestPokemonEncounter) {
              subBuilder.MergeFrom(CompleteQuestPokemonEncounter);
            }
            input.ReadMessage(subBuilder);
            CompleteQuestPokemonEncounter = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
