// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Data/Telemetry/RaidTelemetry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data.Telemetry {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/Telemetry/RaidTelemetry.proto</summary>
  public static partial class RaidTelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/Telemetry/RaidTelemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RaidTelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1QT0dPUHJvdG9zL0RhdGEvVGVsZW1ldHJ5L1JhaWRUZWxlbWV0cnkucHJv",
            "dG8SGVBPR09Qcm90b3MuRGF0YS5UZWxlbWV0cnkaJ1BPR09Qcm90b3MvRW51",
            "bXMvUmFpZFRlbGVtZXRyeUlkcy5wcm90byKoAgoNUmFpZFRlbGVtZXRyeRI9",
            "ChFyYWlkX3RlbGVtZXRyeV9pZBgBIAEoDjIiLlBPR09Qcm90b3MuRW51bXMu",
            "UmFpZFRlbGVtZXRyeUlkcxIWCg5idW5kbGVfdmVyc2lvbhgCIAEoCRIdChV0",
            "aW1lX3NpbmNlX2VudGVyX3JhaWQYAyABKAISJgoedGltZV9zaW5jZV9sYXN0",
            "X3JhaWRfdGVsZW1ldHJ5GAQgASgCEhIKCnJhaWRfbGV2ZWwYBSABKAUSFQoN",
            "cHJpdmF0ZV9sb2JieRgGIAEoCBITCgt0aWNrZXRfaXRlbRgHIAEoCRIcChRu",
            "dW1fcGxheWVyc19pbl9sb2JieRgIIAEoBRIbChNiYXR0bGVfcGFydHlfbnVt",
            "YmVyGAkgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.RaidTelemetryIdsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Telemetry.RaidTelemetry), global::POGOProtos.Data.Telemetry.RaidTelemetry.Parser, new[]{ "RaidTelemetryId", "BundleVersion", "TimeSinceEnterRaid", "TimeSinceLastRaidTelemetry", "RaidLevel", "PrivateLobby", "TicketItem", "NumPlayersInLobby", "BattlePartyNumber" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RaidTelemetry : pb::IMessage<RaidTelemetry> {
    private static readonly pb::MessageParser<RaidTelemetry> _parser = new pb::MessageParser<RaidTelemetry>(() => new RaidTelemetry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaidTelemetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.Telemetry.RaidTelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidTelemetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidTelemetry(RaidTelemetry other) : this() {
      raidTelemetryId_ = other.raidTelemetryId_;
      bundleVersion_ = other.bundleVersion_;
      timeSinceEnterRaid_ = other.timeSinceEnterRaid_;
      timeSinceLastRaidTelemetry_ = other.timeSinceLastRaidTelemetry_;
      raidLevel_ = other.raidLevel_;
      privateLobby_ = other.privateLobby_;
      ticketItem_ = other.ticketItem_;
      numPlayersInLobby_ = other.numPlayersInLobby_;
      battlePartyNumber_ = other.battlePartyNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidTelemetry Clone() {
      return new RaidTelemetry(this);
    }

    /// <summary>Field number for the "raid_telemetry_id" field.</summary>
    public const int RaidTelemetryIdFieldNumber = 1;
    private global::POGOProtos.Enums.RaidTelemetryIds raidTelemetryId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.RaidTelemetryIds RaidTelemetryId {
      get { return raidTelemetryId_; }
      set {
        raidTelemetryId_ = value;
      }
    }

    /// <summary>Field number for the "bundle_version" field.</summary>
    public const int BundleVersionFieldNumber = 2;
    private string bundleVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleVersion {
      get { return bundleVersion_; }
      set {
        bundleVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_since_enter_raid" field.</summary>
    public const int TimeSinceEnterRaidFieldNumber = 3;
    private float timeSinceEnterRaid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeSinceEnterRaid {
      get { return timeSinceEnterRaid_; }
      set {
        timeSinceEnterRaid_ = value;
      }
    }

    /// <summary>Field number for the "time_since_last_raid_telemetry" field.</summary>
    public const int TimeSinceLastRaidTelemetryFieldNumber = 4;
    private float timeSinceLastRaidTelemetry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeSinceLastRaidTelemetry {
      get { return timeSinceLastRaidTelemetry_; }
      set {
        timeSinceLastRaidTelemetry_ = value;
      }
    }

    /// <summary>Field number for the "raid_level" field.</summary>
    public const int RaidLevelFieldNumber = 5;
    private int raidLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaidLevel {
      get { return raidLevel_; }
      set {
        raidLevel_ = value;
      }
    }

    /// <summary>Field number for the "private_lobby" field.</summary>
    public const int PrivateLobbyFieldNumber = 6;
    private bool privateLobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrivateLobby {
      get { return privateLobby_; }
      set {
        privateLobby_ = value;
      }
    }

    /// <summary>Field number for the "ticket_item" field.</summary>
    public const int TicketItemFieldNumber = 7;
    private string ticketItem_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketItem {
      get { return ticketItem_; }
      set {
        ticketItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_players_in_lobby" field.</summary>
    public const int NumPlayersInLobbyFieldNumber = 8;
    private int numPlayersInLobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumPlayersInLobby {
      get { return numPlayersInLobby_; }
      set {
        numPlayersInLobby_ = value;
      }
    }

    /// <summary>Field number for the "battle_party_number" field.</summary>
    public const int BattlePartyNumberFieldNumber = 9;
    private int battlePartyNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlePartyNumber {
      get { return battlePartyNumber_; }
      set {
        battlePartyNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaidTelemetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaidTelemetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RaidTelemetryId != other.RaidTelemetryId) return false;
      if (BundleVersion != other.BundleVersion) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeSinceEnterRaid, other.TimeSinceEnterRaid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeSinceLastRaidTelemetry, other.TimeSinceLastRaidTelemetry)) return false;
      if (RaidLevel != other.RaidLevel) return false;
      if (PrivateLobby != other.PrivateLobby) return false;
      if (TicketItem != other.TicketItem) return false;
      if (NumPlayersInLobby != other.NumPlayersInLobby) return false;
      if (BattlePartyNumber != other.BattlePartyNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RaidTelemetryId != 0) hash ^= RaidTelemetryId.GetHashCode();
      if (BundleVersion.Length != 0) hash ^= BundleVersion.GetHashCode();
      if (TimeSinceEnterRaid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeSinceEnterRaid);
      if (TimeSinceLastRaidTelemetry != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeSinceLastRaidTelemetry);
      if (RaidLevel != 0) hash ^= RaidLevel.GetHashCode();
      if (PrivateLobby != false) hash ^= PrivateLobby.GetHashCode();
      if (TicketItem.Length != 0) hash ^= TicketItem.GetHashCode();
      if (NumPlayersInLobby != 0) hash ^= NumPlayersInLobby.GetHashCode();
      if (BattlePartyNumber != 0) hash ^= BattlePartyNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RaidTelemetryId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RaidTelemetryId);
      }
      if (BundleVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BundleVersion);
      }
      if (TimeSinceEnterRaid != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TimeSinceEnterRaid);
      }
      if (TimeSinceLastRaidTelemetry != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TimeSinceLastRaidTelemetry);
      }
      if (RaidLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RaidLevel);
      }
      if (PrivateLobby != false) {
        output.WriteRawTag(48);
        output.WriteBool(PrivateLobby);
      }
      if (TicketItem.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TicketItem);
      }
      if (NumPlayersInLobby != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NumPlayersInLobby);
      }
      if (BattlePartyNumber != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BattlePartyNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RaidTelemetryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RaidTelemetryId);
      }
      if (BundleVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleVersion);
      }
      if (TimeSinceEnterRaid != 0F) {
        size += 1 + 4;
      }
      if (TimeSinceLastRaidTelemetry != 0F) {
        size += 1 + 4;
      }
      if (RaidLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaidLevel);
      }
      if (PrivateLobby != false) {
        size += 1 + 1;
      }
      if (TicketItem.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketItem);
      }
      if (NumPlayersInLobby != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPlayersInLobby);
      }
      if (BattlePartyNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlePartyNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaidTelemetry other) {
      if (other == null) {
        return;
      }
      if (other.RaidTelemetryId != 0) {
        RaidTelemetryId = other.RaidTelemetryId;
      }
      if (other.BundleVersion.Length != 0) {
        BundleVersion = other.BundleVersion;
      }
      if (other.TimeSinceEnterRaid != 0F) {
        TimeSinceEnterRaid = other.TimeSinceEnterRaid;
      }
      if (other.TimeSinceLastRaidTelemetry != 0F) {
        TimeSinceLastRaidTelemetry = other.TimeSinceLastRaidTelemetry;
      }
      if (other.RaidLevel != 0) {
        RaidLevel = other.RaidLevel;
      }
      if (other.PrivateLobby != false) {
        PrivateLobby = other.PrivateLobby;
      }
      if (other.TicketItem.Length != 0) {
        TicketItem = other.TicketItem;
      }
      if (other.NumPlayersInLobby != 0) {
        NumPlayersInLobby = other.NumPlayersInLobby;
      }
      if (other.BattlePartyNumber != 0) {
        BattlePartyNumber = other.BattlePartyNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            raidTelemetryId_ = (global::POGOProtos.Enums.RaidTelemetryIds) input.ReadEnum();
            break;
          }
          case 18: {
            BundleVersion = input.ReadString();
            break;
          }
          case 29: {
            TimeSinceEnterRaid = input.ReadFloat();
            break;
          }
          case 37: {
            TimeSinceLastRaidTelemetry = input.ReadFloat();
            break;
          }
          case 40: {
            RaidLevel = input.ReadInt32();
            break;
          }
          case 48: {
            PrivateLobby = input.ReadBool();
            break;
          }
          case 58: {
            TicketItem = input.ReadString();
            break;
          }
          case 64: {
            NumPlayersInLobby = input.ReadInt32();
            break;
          }
          case 72: {
            BattlePartyNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
