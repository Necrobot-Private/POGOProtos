// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Data/Telemetry/CatchPokemonTelemetry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data.Telemetry {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/Telemetry/CatchPokemonTelemetry.proto</summary>
  public static partial class CatchPokemonTelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/Telemetry/CatchPokemonTelemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CatchPokemonTelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVQT0dPUHJvdG9zL0RhdGEvVGVsZW1ldHJ5L0NhdGNoUG9rZW1vblRlbGVt",
            "ZXRyeS5wcm90bxIZUE9HT1Byb3Rvcy5EYXRhLlRlbGVtZXRyeRo5UE9HT1By",
            "b3Rvcy9EYXRhL1RlbGVtZXRyeS9FbmNvdW50ZXJQb2tlbW9uVGVsZW1ldHJ5",
            "LnByb3RvItEBChVDYXRjaFBva2Vtb25UZWxlbWV0cnkSDgoGc3RhdHVzGAEg",
            "ASgJElkKG2VuY291bnRlcl9wb2tlbW9uX3RlbGVtZXRyeRgCIAEoCzI0LlBP",
            "R09Qcm90b3MuRGF0YS5UZWxlbWV0cnkuRW5jb3VudGVyUG9rZW1vblRlbGVt",
            "ZXRyeRIQCghiYWxsdHlwZRgDIAEoBRIRCgloaXRfZ3JhZGUYBCABKAUSEgoK",
            "Y3VydmVfYmFsbBgFIAEoCBIUCgxtaXNzX3BlcmNlbnQYBiABKAFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Data.Telemetry.EncounterPokemonTelemetryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Telemetry.CatchPokemonTelemetry), global::POGOProtos.Data.Telemetry.CatchPokemonTelemetry.Parser, new[]{ "Status", "EncounterPokemonTelemetry", "Balltype", "HitGrade", "CurveBall", "MissPercent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CatchPokemonTelemetry : pb::IMessage<CatchPokemonTelemetry> {
    private static readonly pb::MessageParser<CatchPokemonTelemetry> _parser = new pb::MessageParser<CatchPokemonTelemetry>(() => new CatchPokemonTelemetry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatchPokemonTelemetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.Telemetry.CatchPokemonTelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchPokemonTelemetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchPokemonTelemetry(CatchPokemonTelemetry other) : this() {
      status_ = other.status_;
      encounterPokemonTelemetry_ = other.encounterPokemonTelemetry_ != null ? other.encounterPokemonTelemetry_.Clone() : null;
      balltype_ = other.balltype_;
      hitGrade_ = other.hitGrade_;
      curveBall_ = other.curveBall_;
      missPercent_ = other.missPercent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchPokemonTelemetry Clone() {
      return new CatchPokemonTelemetry(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encounter_pokemon_telemetry" field.</summary>
    public const int EncounterPokemonTelemetryFieldNumber = 2;
    private global::POGOProtos.Data.Telemetry.EncounterPokemonTelemetry encounterPokemonTelemetry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Telemetry.EncounterPokemonTelemetry EncounterPokemonTelemetry {
      get { return encounterPokemonTelemetry_; }
      set {
        encounterPokemonTelemetry_ = value;
      }
    }

    /// <summary>Field number for the "balltype" field.</summary>
    public const int BalltypeFieldNumber = 3;
    private int balltype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Balltype {
      get { return balltype_; }
      set {
        balltype_ = value;
      }
    }

    /// <summary>Field number for the "hit_grade" field.</summary>
    public const int HitGradeFieldNumber = 4;
    private int hitGrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitGrade {
      get { return hitGrade_; }
      set {
        hitGrade_ = value;
      }
    }

    /// <summary>Field number for the "curve_ball" field.</summary>
    public const int CurveBallFieldNumber = 5;
    private bool curveBall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CurveBall {
      get { return curveBall_; }
      set {
        curveBall_ = value;
      }
    }

    /// <summary>Field number for the "miss_percent" field.</summary>
    public const int MissPercentFieldNumber = 6;
    private double missPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MissPercent {
      get { return missPercent_; }
      set {
        missPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatchPokemonTelemetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatchPokemonTelemetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(EncounterPokemonTelemetry, other.EncounterPokemonTelemetry)) return false;
      if (Balltype != other.Balltype) return false;
      if (HitGrade != other.HitGrade) return false;
      if (CurveBall != other.CurveBall) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MissPercent, other.MissPercent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (encounterPokemonTelemetry_ != null) hash ^= EncounterPokemonTelemetry.GetHashCode();
      if (Balltype != 0) hash ^= Balltype.GetHashCode();
      if (HitGrade != 0) hash ^= HitGrade.GetHashCode();
      if (CurveBall != false) hash ^= CurveBall.GetHashCode();
      if (MissPercent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MissPercent);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Status);
      }
      if (encounterPokemonTelemetry_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EncounterPokemonTelemetry);
      }
      if (Balltype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Balltype);
      }
      if (HitGrade != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HitGrade);
      }
      if (CurveBall != false) {
        output.WriteRawTag(40);
        output.WriteBool(CurveBall);
      }
      if (MissPercent != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MissPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (encounterPokemonTelemetry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncounterPokemonTelemetry);
      }
      if (Balltype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Balltype);
      }
      if (HitGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitGrade);
      }
      if (CurveBall != false) {
        size += 1 + 1;
      }
      if (MissPercent != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatchPokemonTelemetry other) {
      if (other == null) {
        return;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.encounterPokemonTelemetry_ != null) {
        if (encounterPokemonTelemetry_ == null) {
          encounterPokemonTelemetry_ = new global::POGOProtos.Data.Telemetry.EncounterPokemonTelemetry();
        }
        EncounterPokemonTelemetry.MergeFrom(other.EncounterPokemonTelemetry);
      }
      if (other.Balltype != 0) {
        Balltype = other.Balltype;
      }
      if (other.HitGrade != 0) {
        HitGrade = other.HitGrade;
      }
      if (other.CurveBall != false) {
        CurveBall = other.CurveBall;
      }
      if (other.MissPercent != 0D) {
        MissPercent = other.MissPercent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Status = input.ReadString();
            break;
          }
          case 18: {
            if (encounterPokemonTelemetry_ == null) {
              encounterPokemonTelemetry_ = new global::POGOProtos.Data.Telemetry.EncounterPokemonTelemetry();
            }
            input.ReadMessage(encounterPokemonTelemetry_);
            break;
          }
          case 24: {
            Balltype = input.ReadInt32();
            break;
          }
          case 32: {
            HitGrade = input.ReadInt32();
            break;
          }
          case 40: {
            CurveBall = input.ReadBool();
            break;
          }
          case 49: {
            MissPercent = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
