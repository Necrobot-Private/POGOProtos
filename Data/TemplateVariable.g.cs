// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/TemplateVariable.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/TemplateVariable.proto</summary>
  public static partial class TemplateVariableReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/TemplateVariable.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TemplateVariableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZQT0dPUHJvdG9zL0RhdGEvVGVtcGxhdGVWYXJpYWJsZS5wcm90bxIPUE9H",
            "T1Byb3Rvcy5EYXRhImgKEFRlbXBsYXRlVmFyaWFibGUSDAoEbmFtZRgBIAEo",
            "CRIPCgdsaXRlcmFsGAIgASgJEgsKA2tleRgDIAEoCRIUCgxsb29rdXBfdGFi",
            "bGUYBCABKAkSEgoKYnl0ZV92YWx1ZRgFIAEoDGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.TemplateVariable), global::POGOProtos.Data.TemplateVariable.Parser, new[]{ "Name", "Literal", "Key", "LookupTable", "ByteValue" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TemplateVariable : pb::IMessage<TemplateVariable> {
    private static readonly pb::MessageParser<TemplateVariable> _parser = new pb::MessageParser<TemplateVariable>(() => new TemplateVariable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TemplateVariable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.TemplateVariableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateVariable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateVariable(TemplateVariable other) : this() {
      name_ = other.name_;
      literal_ = other.literal_;
      key_ = other.key_;
      lookupTable_ = other.lookupTable_;
      byteValue_ = other.byteValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateVariable Clone() {
      return new TemplateVariable(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "literal" field.</summary>
    public const int LiteralFieldNumber = 2;
    private string literal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Literal {
      get { return literal_; }
      set {
        literal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lookup_table" field.</summary>
    public const int LookupTableFieldNumber = 4;
    private string lookupTable_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LookupTable {
      get { return lookupTable_; }
      set {
        lookupTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "byte_value" field.</summary>
    public const int ByteValueFieldNumber = 5;
    private pb::ByteString byteValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ByteValue {
      get { return byteValue_; }
      set {
        byteValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TemplateVariable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TemplateVariable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Literal != other.Literal) return false;
      if (Key != other.Key) return false;
      if (LookupTable != other.LookupTable) return false;
      if (ByteValue != other.ByteValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Literal.Length != 0) hash ^= Literal.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (LookupTable.Length != 0) hash ^= LookupTable.GetHashCode();
      if (ByteValue.Length != 0) hash ^= ByteValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Literal.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Literal);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Key);
      }
      if (LookupTable.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LookupTable);
      }
      if (ByteValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ByteValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Literal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Literal);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (LookupTable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LookupTable);
      }
      if (ByteValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ByteValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TemplateVariable other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Literal.Length != 0) {
        Literal = other.Literal;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.LookupTable.Length != 0) {
        LookupTable = other.LookupTable;
      }
      if (other.ByteValue.Length != 0) {
        ByteValue = other.ByteValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Literal = input.ReadString();
            break;
          }
          case 26: {
            Key = input.ReadString();
            break;
          }
          case 34: {
            LookupTable = input.ReadString();
            break;
          }
          case 42: {
            ByteValue = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
