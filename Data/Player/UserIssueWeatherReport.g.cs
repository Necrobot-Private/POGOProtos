// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Data/Player/UserIssueWeatherReport.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data.Player {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/Player/UserIssueWeatherReport.proto</summary>
  public static partial class UserIssueWeatherReportReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/Player/UserIssueWeatherReport.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserIssueWeatherReportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNQT0dPUHJvdG9zL0RhdGEvUGxheWVyL1VzZXJJc3N1ZVdlYXRoZXJSZXBv",
            "cnQucHJvdG8SFlBPR09Qcm90b3MuRGF0YS5QbGF5ZXIicQoWVXNlcklzc3Vl",
            "V2VhdGhlclJlcG9ydBIaChJnYW1lcGxheWVyX3dlYXRoZXIYASABKAkSFAoM",
            "YWxlcnRfYWN0aXZlGAIgASgIEhAKCHNldmVyaXR5GAMgASgFEhMKC3VzZXJf",
            "cmVwb3J0GAQgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Player.UserIssueWeatherReport), global::POGOProtos.Data.Player.UserIssueWeatherReport.Parser, new[]{ "GameplayerWeather", "AlertActive", "Severity", "UserReport" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserIssueWeatherReport : pb::IMessage<UserIssueWeatherReport> {
    private static readonly pb::MessageParser<UserIssueWeatherReport> _parser = new pb::MessageParser<UserIssueWeatherReport>(() => new UserIssueWeatherReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserIssueWeatherReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.Player.UserIssueWeatherReportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIssueWeatherReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIssueWeatherReport(UserIssueWeatherReport other) : this() {
      gameplayerWeather_ = other.gameplayerWeather_;
      alertActive_ = other.alertActive_;
      severity_ = other.severity_;
      userReport_ = other.userReport_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIssueWeatherReport Clone() {
      return new UserIssueWeatherReport(this);
    }

    /// <summary>Field number for the "gameplayer_weather" field.</summary>
    public const int GameplayerWeatherFieldNumber = 1;
    private string gameplayerWeather_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameplayerWeather {
      get { return gameplayerWeather_; }
      set {
        gameplayerWeather_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alert_active" field.</summary>
    public const int AlertActiveFieldNumber = 2;
    private bool alertActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AlertActive {
      get { return alertActive_; }
      set {
        alertActive_ = value;
      }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 3;
    private int severity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "user_report" field.</summary>
    public const int UserReportFieldNumber = 4;
    private int userReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserReport {
      get { return userReport_; }
      set {
        userReport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserIssueWeatherReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserIssueWeatherReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameplayerWeather != other.GameplayerWeather) return false;
      if (AlertActive != other.AlertActive) return false;
      if (Severity != other.Severity) return false;
      if (UserReport != other.UserReport) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameplayerWeather.Length != 0) hash ^= GameplayerWeather.GetHashCode();
      if (AlertActive != false) hash ^= AlertActive.GetHashCode();
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (UserReport != 0) hash ^= UserReport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameplayerWeather.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameplayerWeather);
      }
      if (AlertActive != false) {
        output.WriteRawTag(16);
        output.WriteBool(AlertActive);
      }
      if (Severity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Severity);
      }
      if (UserReport != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UserReport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameplayerWeather.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameplayerWeather);
      }
      if (AlertActive != false) {
        size += 1 + 1;
      }
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Severity);
      }
      if (UserReport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserReport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserIssueWeatherReport other) {
      if (other == null) {
        return;
      }
      if (other.GameplayerWeather.Length != 0) {
        GameplayerWeather = other.GameplayerWeather;
      }
      if (other.AlertActive != false) {
        AlertActive = other.AlertActive;
      }
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      if (other.UserReport != 0) {
        UserReport = other.UserReport;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameplayerWeather = input.ReadString();
            break;
          }
          case 16: {
            AlertActive = input.ReadBool();
            break;
          }
          case 24: {
            Severity = input.ReadInt32();
            break;
          }
          case 32: {
            UserReport = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
