// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Networking/Responses/GetRaidDetailsResponse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Networking.Responses {

  /// <summary>Holder for reflection information generated from POGOProtos/Networking/Responses/GetRaidDetailsResponse.proto</summary>
  public static partial class GetRaidDetailsResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Networking/Responses/GetRaidDetailsResponse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GetRaidDetailsResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjxQT0dPUHJvdG9zL05ldHdvcmtpbmcvUmVzcG9uc2VzL0dldFJhaWREZXRh",
            "aWxzUmVzcG9uc2UucHJvdG8SH1BPR09Qcm90b3MuTmV0d29ya2luZy5SZXNw",
            "b25zZXMaIFBPR09Qcm90b3MvRGF0YS9SYWlkL0xvYmJ5LnByb3RvGiNQT0dP",
            "UHJvdG9zL0RhdGEvQmF0dGxlL0JhdHRsZS5wcm90bxojUE9HT1Byb3Rvcy9E",
            "YXRhL1JhaWQvUmFpZEluZm8ucHJvdG8i5wQKFkdldFJhaWREZXRhaWxzUmVz",
            "cG9uc2USKgoFbG9iYnkYASABKAsyGy5QT0dPUHJvdG9zLkRhdGEuUmFpZC5M",
            "b2JieRIzCgtyYWlkX2JhdHRsZRgCIAEoCzIeLlBPR09Qcm90b3MuRGF0YS5C",
            "YXR0bGUuQmF0dGxlEh0KFXBsYXllcl9jYW5fam9pbl9sb2JieRgDIAEoCBJO",
            "CgZyZXN1bHQYBCABKA4yPi5QT0dPUHJvdG9zLk5ldHdvcmtpbmcuUmVzcG9u",
            "c2VzLkdldFJhaWREZXRhaWxzUmVzcG9uc2UuUmVzdWx0EjEKCXJhaWRfaW5m",
            "bxgFIAEoCzIeLlBPR09Qcm90b3MuRGF0YS5SYWlkLlJhaWRJbmZvEhMKC3Rp",
            "Y2tldF91c2VkGAYgASgIEh0KFWZyZWVfdGlja2V0X2F2YWlsYWJsZRgHIAEo",
            "CBIYChB0aHJvd3NfcmVtYWluaW5nGAggASgFEhgKEHJlY2VpdmVkX3Jld2Fy",
            "ZHMYCSABKAgSHAoUbnVtX3BsYXllcnNfaW5fbG9iYnkYCiABKAUSEQoJc2Vy",
            "dmVyX21zGAsgASgDIrABCgZSZXN1bHQSCQoFVU5TRVQQABILCgdTVUNDRVNT",
            "EAESFgoSRVJST1JfTk9UX0lOX1JBTkdFEAISGAoURVJST1JfUkFJRF9DT01Q",
            "TEVURUQQAxIaChZFUlJPUl9SQUlEX1VOQVZBSUxBQkxFEAQSJAogRVJST1Jf",
            "UExBWUVSX0JFTE9XX01JTklNVU1fTEVWRUwQBRIaChZFUlJPUl9QT0lfSU5B",
            "Q0NFU1NJQkxFEAZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Data.Raid.LobbyReflection.Descriptor, global::POGOProtos.Data.Battle.BattleReflection.Descriptor, global::POGOProtos.Data.Raid.RaidInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.GetRaidDetailsResponse), global::POGOProtos.Networking.Responses.GetRaidDetailsResponse.Parser, new[]{ "Lobby", "RaidBattle", "PlayerCanJoinLobby", "Result", "RaidInfo", "TicketUsed", "FreeTicketAvailable", "ThrowsRemaining", "ReceivedRewards", "NumPlayersInLobby", "ServerMs" }, null, new[]{ typeof(global::POGOProtos.Networking.Responses.GetRaidDetailsResponse.Types.Result) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetRaidDetailsResponse : pb::IMessage<GetRaidDetailsResponse> {
    private static readonly pb::MessageParser<GetRaidDetailsResponse> _parser = new pb::MessageParser<GetRaidDetailsResponse>(() => new GetRaidDetailsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRaidDetailsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GetRaidDetailsResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRaidDetailsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRaidDetailsResponse(GetRaidDetailsResponse other) : this() {
      lobby_ = other.lobby_ != null ? other.lobby_.Clone() : null;
      raidBattle_ = other.raidBattle_ != null ? other.raidBattle_.Clone() : null;
      playerCanJoinLobby_ = other.playerCanJoinLobby_;
      result_ = other.result_;
      raidInfo_ = other.raidInfo_ != null ? other.raidInfo_.Clone() : null;
      ticketUsed_ = other.ticketUsed_;
      freeTicketAvailable_ = other.freeTicketAvailable_;
      throwsRemaining_ = other.throwsRemaining_;
      receivedRewards_ = other.receivedRewards_;
      numPlayersInLobby_ = other.numPlayersInLobby_;
      serverMs_ = other.serverMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRaidDetailsResponse Clone() {
      return new GetRaidDetailsResponse(this);
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 1;
    private global::POGOProtos.Data.Raid.Lobby lobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Raid.Lobby Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    /// <summary>Field number for the "raid_battle" field.</summary>
    public const int RaidBattleFieldNumber = 2;
    private global::POGOProtos.Data.Battle.Battle raidBattle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Battle.Battle RaidBattle {
      get { return raidBattle_; }
      set {
        raidBattle_ = value;
      }
    }

    /// <summary>Field number for the "player_can_join_lobby" field.</summary>
    public const int PlayerCanJoinLobbyFieldNumber = 3;
    private bool playerCanJoinLobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayerCanJoinLobby {
      get { return playerCanJoinLobby_; }
      set {
        playerCanJoinLobby_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::POGOProtos.Networking.Responses.GetRaidDetailsResponse.Types.Result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.GetRaidDetailsResponse.Types.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "raid_info" field.</summary>
    public const int RaidInfoFieldNumber = 5;
    private global::POGOProtos.Data.Raid.RaidInfo raidInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Raid.RaidInfo RaidInfo {
      get { return raidInfo_; }
      set {
        raidInfo_ = value;
      }
    }

    /// <summary>Field number for the "ticket_used" field.</summary>
    public const int TicketUsedFieldNumber = 6;
    private bool ticketUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TicketUsed {
      get { return ticketUsed_; }
      set {
        ticketUsed_ = value;
      }
    }

    /// <summary>Field number for the "free_ticket_available" field.</summary>
    public const int FreeTicketAvailableFieldNumber = 7;
    private bool freeTicketAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FreeTicketAvailable {
      get { return freeTicketAvailable_; }
      set {
        freeTicketAvailable_ = value;
      }
    }

    /// <summary>Field number for the "throws_remaining" field.</summary>
    public const int ThrowsRemainingFieldNumber = 8;
    private int throwsRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrowsRemaining {
      get { return throwsRemaining_; }
      set {
        throwsRemaining_ = value;
      }
    }

    /// <summary>Field number for the "received_rewards" field.</summary>
    public const int ReceivedRewardsFieldNumber = 9;
    private bool receivedRewards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceivedRewards {
      get { return receivedRewards_; }
      set {
        receivedRewards_ = value;
      }
    }

    /// <summary>Field number for the "num_players_in_lobby" field.</summary>
    public const int NumPlayersInLobbyFieldNumber = 10;
    private int numPlayersInLobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumPlayersInLobby {
      get { return numPlayersInLobby_; }
      set {
        numPlayersInLobby_ = value;
      }
    }

    /// <summary>Field number for the "server_ms" field.</summary>
    public const int ServerMsFieldNumber = 11;
    private long serverMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerMs {
      get { return serverMs_; }
      set {
        serverMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRaidDetailsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRaidDetailsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Lobby, other.Lobby)) return false;
      if (!object.Equals(RaidBattle, other.RaidBattle)) return false;
      if (PlayerCanJoinLobby != other.PlayerCanJoinLobby) return false;
      if (Result != other.Result) return false;
      if (!object.Equals(RaidInfo, other.RaidInfo)) return false;
      if (TicketUsed != other.TicketUsed) return false;
      if (FreeTicketAvailable != other.FreeTicketAvailable) return false;
      if (ThrowsRemaining != other.ThrowsRemaining) return false;
      if (ReceivedRewards != other.ReceivedRewards) return false;
      if (NumPlayersInLobby != other.NumPlayersInLobby) return false;
      if (ServerMs != other.ServerMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      if (raidBattle_ != null) hash ^= RaidBattle.GetHashCode();
      if (PlayerCanJoinLobby != false) hash ^= PlayerCanJoinLobby.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (raidInfo_ != null) hash ^= RaidInfo.GetHashCode();
      if (TicketUsed != false) hash ^= TicketUsed.GetHashCode();
      if (FreeTicketAvailable != false) hash ^= FreeTicketAvailable.GetHashCode();
      if (ThrowsRemaining != 0) hash ^= ThrowsRemaining.GetHashCode();
      if (ReceivedRewards != false) hash ^= ReceivedRewards.GetHashCode();
      if (NumPlayersInLobby != 0) hash ^= NumPlayersInLobby.GetHashCode();
      if (ServerMs != 0L) hash ^= ServerMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lobby_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Lobby);
      }
      if (raidBattle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RaidBattle);
      }
      if (PlayerCanJoinLobby != false) {
        output.WriteRawTag(24);
        output.WriteBool(PlayerCanJoinLobby);
      }
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Result);
      }
      if (raidInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RaidInfo);
      }
      if (TicketUsed != false) {
        output.WriteRawTag(48);
        output.WriteBool(TicketUsed);
      }
      if (FreeTicketAvailable != false) {
        output.WriteRawTag(56);
        output.WriteBool(FreeTicketAvailable);
      }
      if (ThrowsRemaining != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ThrowsRemaining);
      }
      if (ReceivedRewards != false) {
        output.WriteRawTag(72);
        output.WriteBool(ReceivedRewards);
      }
      if (NumPlayersInLobby != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NumPlayersInLobby);
      }
      if (ServerMs != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(ServerMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lobby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      if (raidBattle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RaidBattle);
      }
      if (PlayerCanJoinLobby != false) {
        size += 1 + 1;
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (raidInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RaidInfo);
      }
      if (TicketUsed != false) {
        size += 1 + 1;
      }
      if (FreeTicketAvailable != false) {
        size += 1 + 1;
      }
      if (ThrowsRemaining != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThrowsRemaining);
      }
      if (ReceivedRewards != false) {
        size += 1 + 1;
      }
      if (NumPlayersInLobby != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPlayersInLobby);
      }
      if (ServerMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRaidDetailsResponse other) {
      if (other == null) {
        return;
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::POGOProtos.Data.Raid.Lobby();
        }
        Lobby.MergeFrom(other.Lobby);
      }
      if (other.raidBattle_ != null) {
        if (raidBattle_ == null) {
          raidBattle_ = new global::POGOProtos.Data.Battle.Battle();
        }
        RaidBattle.MergeFrom(other.RaidBattle);
      }
      if (other.PlayerCanJoinLobby != false) {
        PlayerCanJoinLobby = other.PlayerCanJoinLobby;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.raidInfo_ != null) {
        if (raidInfo_ == null) {
          raidInfo_ = new global::POGOProtos.Data.Raid.RaidInfo();
        }
        RaidInfo.MergeFrom(other.RaidInfo);
      }
      if (other.TicketUsed != false) {
        TicketUsed = other.TicketUsed;
      }
      if (other.FreeTicketAvailable != false) {
        FreeTicketAvailable = other.FreeTicketAvailable;
      }
      if (other.ThrowsRemaining != 0) {
        ThrowsRemaining = other.ThrowsRemaining;
      }
      if (other.ReceivedRewards != false) {
        ReceivedRewards = other.ReceivedRewards;
      }
      if (other.NumPlayersInLobby != 0) {
        NumPlayersInLobby = other.NumPlayersInLobby;
      }
      if (other.ServerMs != 0L) {
        ServerMs = other.ServerMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lobby_ == null) {
              lobby_ = new global::POGOProtos.Data.Raid.Lobby();
            }
            input.ReadMessage(lobby_);
            break;
          }
          case 18: {
            if (raidBattle_ == null) {
              raidBattle_ = new global::POGOProtos.Data.Battle.Battle();
            }
            input.ReadMessage(raidBattle_);
            break;
          }
          case 24: {
            PlayerCanJoinLobby = input.ReadBool();
            break;
          }
          case 32: {
            result_ = (global::POGOProtos.Networking.Responses.GetRaidDetailsResponse.Types.Result) input.ReadEnum();
            break;
          }
          case 42: {
            if (raidInfo_ == null) {
              raidInfo_ = new global::POGOProtos.Data.Raid.RaidInfo();
            }
            input.ReadMessage(raidInfo_);
            break;
          }
          case 48: {
            TicketUsed = input.ReadBool();
            break;
          }
          case 56: {
            FreeTicketAvailable = input.ReadBool();
            break;
          }
          case 64: {
            ThrowsRemaining = input.ReadInt32();
            break;
          }
          case 72: {
            ReceivedRewards = input.ReadBool();
            break;
          }
          case 80: {
            NumPlayersInLobby = input.ReadInt32();
            break;
          }
          case 88: {
            ServerMs = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetRaidDetailsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Result {
        [pbr::OriginalName("UNSET")] Unset = 0,
        [pbr::OriginalName("SUCCESS")] Success = 1,
        [pbr::OriginalName("ERROR_NOT_IN_RANGE")] ErrorNotInRange = 2,
        [pbr::OriginalName("ERROR_RAID_COMPLETED")] ErrorRaidCompleted = 3,
        [pbr::OriginalName("ERROR_RAID_UNAVAILABLE")] ErrorRaidUnavailable = 4,
        [pbr::OriginalName("ERROR_PLAYER_BELOW_MINIMUM_LEVEL")] ErrorPlayerBelowMinimumLevel = 5,
        [pbr::OriginalName("ERROR_POI_INACCESSIBLE")] ErrorPoiInaccessible = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
