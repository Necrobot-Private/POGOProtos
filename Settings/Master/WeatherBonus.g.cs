// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Settings/Master/WeatherBonus.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Settings.Master {

  /// <summary>Holder for reflection information generated from POGOProtos/Settings/Master/WeatherBonus.proto</summary>
  public static partial class WeatherBonusReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Settings/Master/WeatherBonus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeatherBonusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1QT0dPUHJvdG9zL1NldHRpbmdzL01hc3Rlci9XZWF0aGVyQm9udXMucHJv",
            "dG8SGlBPR09Qcm90b3MuU2V0dGluZ3MuTWFzdGVyIvYBCgxXZWF0aGVyQm9u",
            "dXMSGwoTY3BfYmFzZV9sZXZlbF9ib251cxgBIAEoBRIkChxndWFyYW50ZWVk",
            "X2luZGl2aWR1YWxfdmFsdWVzGAIgASgFEiEKGXN0YXJkdXN0X2JvbnVzX211",
            "bHRpcGxpZXIYAyABKAESHwoXYXR0YWNrX2JvbnVzX211bHRpcGxpZXIYBCAB",
            "KAESKgoicmFpZF9lbmNvdW50ZXJfY3BfYmFzZV9sZXZlbF9ib251cxgFIAEo",
            "BRIzCityYWlkX2VuY291bnRlcl9ndWFyYW50ZWVkX2luZGl2aWR1YWxfdmFs",
            "dWVzGAYgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.WeatherBonus), global::POGOProtos.Settings.Master.WeatherBonus.Parser, new[]{ "CpBaseLevelBonus", "GuaranteedIndividualValues", "StardustBonusMultiplier", "AttackBonusMultiplier", "RaidEncounterCpBaseLevelBonus", "RaidEncounterGuaranteedIndividualValues" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeatherBonus : pb::IMessage<WeatherBonus> {
    private static readonly pb::MessageParser<WeatherBonus> _parser = new pb::MessageParser<WeatherBonus>(() => new WeatherBonus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeatherBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.WeatherBonusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherBonus(WeatherBonus other) : this() {
      cpBaseLevelBonus_ = other.cpBaseLevelBonus_;
      guaranteedIndividualValues_ = other.guaranteedIndividualValues_;
      stardustBonusMultiplier_ = other.stardustBonusMultiplier_;
      attackBonusMultiplier_ = other.attackBonusMultiplier_;
      raidEncounterCpBaseLevelBonus_ = other.raidEncounterCpBaseLevelBonus_;
      raidEncounterGuaranteedIndividualValues_ = other.raidEncounterGuaranteedIndividualValues_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherBonus Clone() {
      return new WeatherBonus(this);
    }

    /// <summary>Field number for the "cp_base_level_bonus" field.</summary>
    public const int CpBaseLevelBonusFieldNumber = 1;
    private int cpBaseLevelBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CpBaseLevelBonus {
      get { return cpBaseLevelBonus_; }
      set {
        cpBaseLevelBonus_ = value;
      }
    }

    /// <summary>Field number for the "guaranteed_individual_values" field.</summary>
    public const int GuaranteedIndividualValuesFieldNumber = 2;
    private int guaranteedIndividualValues_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuaranteedIndividualValues {
      get { return guaranteedIndividualValues_; }
      set {
        guaranteedIndividualValues_ = value;
      }
    }

    /// <summary>Field number for the "stardust_bonus_multiplier" field.</summary>
    public const int StardustBonusMultiplierFieldNumber = 3;
    private double stardustBonusMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StardustBonusMultiplier {
      get { return stardustBonusMultiplier_; }
      set {
        stardustBonusMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "attack_bonus_multiplier" field.</summary>
    public const int AttackBonusMultiplierFieldNumber = 4;
    private double attackBonusMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AttackBonusMultiplier {
      get { return attackBonusMultiplier_; }
      set {
        attackBonusMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "raid_encounter_cp_base_level_bonus" field.</summary>
    public const int RaidEncounterCpBaseLevelBonusFieldNumber = 5;
    private int raidEncounterCpBaseLevelBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaidEncounterCpBaseLevelBonus {
      get { return raidEncounterCpBaseLevelBonus_; }
      set {
        raidEncounterCpBaseLevelBonus_ = value;
      }
    }

    /// <summary>Field number for the "raid_encounter_guaranteed_individual_values" field.</summary>
    public const int RaidEncounterGuaranteedIndividualValuesFieldNumber = 6;
    private int raidEncounterGuaranteedIndividualValues_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaidEncounterGuaranteedIndividualValues {
      get { return raidEncounterGuaranteedIndividualValues_; }
      set {
        raidEncounterGuaranteedIndividualValues_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeatherBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeatherBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpBaseLevelBonus != other.CpBaseLevelBonus) return false;
      if (GuaranteedIndividualValues != other.GuaranteedIndividualValues) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StardustBonusMultiplier, other.StardustBonusMultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AttackBonusMultiplier, other.AttackBonusMultiplier)) return false;
      if (RaidEncounterCpBaseLevelBonus != other.RaidEncounterCpBaseLevelBonus) return false;
      if (RaidEncounterGuaranteedIndividualValues != other.RaidEncounterGuaranteedIndividualValues) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CpBaseLevelBonus != 0) hash ^= CpBaseLevelBonus.GetHashCode();
      if (GuaranteedIndividualValues != 0) hash ^= GuaranteedIndividualValues.GetHashCode();
      if (StardustBonusMultiplier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StardustBonusMultiplier);
      if (AttackBonusMultiplier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AttackBonusMultiplier);
      if (RaidEncounterCpBaseLevelBonus != 0) hash ^= RaidEncounterCpBaseLevelBonus.GetHashCode();
      if (RaidEncounterGuaranteedIndividualValues != 0) hash ^= RaidEncounterGuaranteedIndividualValues.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CpBaseLevelBonus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CpBaseLevelBonus);
      }
      if (GuaranteedIndividualValues != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GuaranteedIndividualValues);
      }
      if (StardustBonusMultiplier != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(StardustBonusMultiplier);
      }
      if (AttackBonusMultiplier != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AttackBonusMultiplier);
      }
      if (RaidEncounterCpBaseLevelBonus != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RaidEncounterCpBaseLevelBonus);
      }
      if (RaidEncounterGuaranteedIndividualValues != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RaidEncounterGuaranteedIndividualValues);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CpBaseLevelBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpBaseLevelBonus);
      }
      if (GuaranteedIndividualValues != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuaranteedIndividualValues);
      }
      if (StardustBonusMultiplier != 0D) {
        size += 1 + 8;
      }
      if (AttackBonusMultiplier != 0D) {
        size += 1 + 8;
      }
      if (RaidEncounterCpBaseLevelBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaidEncounterCpBaseLevelBonus);
      }
      if (RaidEncounterGuaranteedIndividualValues != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaidEncounterGuaranteedIndividualValues);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeatherBonus other) {
      if (other == null) {
        return;
      }
      if (other.CpBaseLevelBonus != 0) {
        CpBaseLevelBonus = other.CpBaseLevelBonus;
      }
      if (other.GuaranteedIndividualValues != 0) {
        GuaranteedIndividualValues = other.GuaranteedIndividualValues;
      }
      if (other.StardustBonusMultiplier != 0D) {
        StardustBonusMultiplier = other.StardustBonusMultiplier;
      }
      if (other.AttackBonusMultiplier != 0D) {
        AttackBonusMultiplier = other.AttackBonusMultiplier;
      }
      if (other.RaidEncounterCpBaseLevelBonus != 0) {
        RaidEncounterCpBaseLevelBonus = other.RaidEncounterCpBaseLevelBonus;
      }
      if (other.RaidEncounterGuaranteedIndividualValues != 0) {
        RaidEncounterGuaranteedIndividualValues = other.RaidEncounterGuaranteedIndividualValues;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CpBaseLevelBonus = input.ReadInt32();
            break;
          }
          case 16: {
            GuaranteedIndividualValues = input.ReadInt32();
            break;
          }
          case 25: {
            StardustBonusMultiplier = input.ReadDouble();
            break;
          }
          case 33: {
            AttackBonusMultiplier = input.ReadDouble();
            break;
          }
          case 40: {
            RaidEncounterCpBaseLevelBonus = input.ReadInt32();
            break;
          }
          case 48: {
            RaidEncounterGuaranteedIndividualValues = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
