// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: POGOProtos/Settings/TelemetryGlobalSettings.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Settings {

  /// <summary>Holder for reflection information generated from POGOProtos/Settings/TelemetryGlobalSettings.proto</summary>
  public static partial class TelemetryGlobalSettingsReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Settings/TelemetryGlobalSettings.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TelemetryGlobalSettingsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFQT0dPUHJvdG9zL1NldHRpbmdzL1RlbGVtZXRyeUdsb2JhbFNldHRpbmdz",
            "LnByb3RvEhNQT0dPUHJvdG9zLlNldHRpbmdzIuUBChdUZWxlbWV0cnlHbG9i",
            "YWxTZXR0aW5ncxIPCgdlbmFibGVkGAEgASgIEiEKGXNlc3Npb25fc2FtcGxp",
            "bmdfZnJhY3Rpb24YAiABKAESGgoSbWF4X2J1ZmZlcl9zaXplX2tiGAMgASgF",
            "EhIKCmJhdGNoX3NpemUYBCABKAUSGgoSdXBkYXRlX2ludGVydmFsX21zGAUg",
            "ASgDEiUKHWZyYW1lX3JhdGVfc2FtcGxlX2ludGVydmFsX21zGAYgASgDEiMK",
            "G2ZyYW1lX3JhdGVfc2FtcGxlX3BlcmlvZF9tcxgHIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.TelemetryGlobalSettings), global::POGOProtos.Settings.TelemetryGlobalSettings.Parser, new[]{ "Enabled", "SessionSamplingFraction", "MaxBufferSizeKb", "BatchSize", "UpdateIntervalMs", "FrameRateSampleIntervalMs", "FrameRateSamplePeriodMs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TelemetryGlobalSettings : pb::IMessage<TelemetryGlobalSettings> {
    private static readonly pb::MessageParser<TelemetryGlobalSettings> _parser = new pb::MessageParser<TelemetryGlobalSettings>(() => new TelemetryGlobalSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TelemetryGlobalSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.TelemetryGlobalSettingsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryGlobalSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryGlobalSettings(TelemetryGlobalSettings other) : this() {
      enabled_ = other.enabled_;
      sessionSamplingFraction_ = other.sessionSamplingFraction_;
      maxBufferSizeKb_ = other.maxBufferSizeKb_;
      batchSize_ = other.batchSize_;
      updateIntervalMs_ = other.updateIntervalMs_;
      frameRateSampleIntervalMs_ = other.frameRateSampleIntervalMs_;
      frameRateSamplePeriodMs_ = other.frameRateSamplePeriodMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryGlobalSettings Clone() {
      return new TelemetryGlobalSettings(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "session_sampling_fraction" field.</summary>
    public const int SessionSamplingFractionFieldNumber = 2;
    private double sessionSamplingFraction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SessionSamplingFraction {
      get { return sessionSamplingFraction_; }
      set {
        sessionSamplingFraction_ = value;
      }
    }

    /// <summary>Field number for the "max_buffer_size_kb" field.</summary>
    public const int MaxBufferSizeKbFieldNumber = 3;
    private int maxBufferSizeKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBufferSizeKb {
      get { return maxBufferSizeKb_; }
      set {
        maxBufferSizeKb_ = value;
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 4;
    private int batchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "update_interval_ms" field.</summary>
    public const int UpdateIntervalMsFieldNumber = 5;
    private long updateIntervalMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateIntervalMs {
      get { return updateIntervalMs_; }
      set {
        updateIntervalMs_ = value;
      }
    }

    /// <summary>Field number for the "frame_rate_sample_interval_ms" field.</summary>
    public const int FrameRateSampleIntervalMsFieldNumber = 6;
    private long frameRateSampleIntervalMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameRateSampleIntervalMs {
      get { return frameRateSampleIntervalMs_; }
      set {
        frameRateSampleIntervalMs_ = value;
      }
    }

    /// <summary>Field number for the "frame_rate_sample_period_ms" field.</summary>
    public const int FrameRateSamplePeriodMsFieldNumber = 7;
    private long frameRateSamplePeriodMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameRateSamplePeriodMs {
      get { return frameRateSamplePeriodMs_; }
      set {
        frameRateSamplePeriodMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TelemetryGlobalSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TelemetryGlobalSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SessionSamplingFraction, other.SessionSamplingFraction)) return false;
      if (MaxBufferSizeKb != other.MaxBufferSizeKb) return false;
      if (BatchSize != other.BatchSize) return false;
      if (UpdateIntervalMs != other.UpdateIntervalMs) return false;
      if (FrameRateSampleIntervalMs != other.FrameRateSampleIntervalMs) return false;
      if (FrameRateSamplePeriodMs != other.FrameRateSamplePeriodMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (SessionSamplingFraction != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SessionSamplingFraction);
      if (MaxBufferSizeKb != 0) hash ^= MaxBufferSizeKb.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (UpdateIntervalMs != 0L) hash ^= UpdateIntervalMs.GetHashCode();
      if (FrameRateSampleIntervalMs != 0L) hash ^= FrameRateSampleIntervalMs.GetHashCode();
      if (FrameRateSamplePeriodMs != 0L) hash ^= FrameRateSamplePeriodMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (SessionSamplingFraction != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SessionSamplingFraction);
      }
      if (MaxBufferSizeKb != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxBufferSizeKb);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BatchSize);
      }
      if (UpdateIntervalMs != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(UpdateIntervalMs);
      }
      if (FrameRateSampleIntervalMs != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(FrameRateSampleIntervalMs);
      }
      if (FrameRateSamplePeriodMs != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FrameRateSamplePeriodMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (SessionSamplingFraction != 0D) {
        size += 1 + 8;
      }
      if (MaxBufferSizeKb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBufferSizeKb);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchSize);
      }
      if (UpdateIntervalMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateIntervalMs);
      }
      if (FrameRateSampleIntervalMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameRateSampleIntervalMs);
      }
      if (FrameRateSamplePeriodMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameRateSamplePeriodMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TelemetryGlobalSettings other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.SessionSamplingFraction != 0D) {
        SessionSamplingFraction = other.SessionSamplingFraction;
      }
      if (other.MaxBufferSizeKb != 0) {
        MaxBufferSizeKb = other.MaxBufferSizeKb;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.UpdateIntervalMs != 0L) {
        UpdateIntervalMs = other.UpdateIntervalMs;
      }
      if (other.FrameRateSampleIntervalMs != 0L) {
        FrameRateSampleIntervalMs = other.FrameRateSampleIntervalMs;
      }
      if (other.FrameRateSamplePeriodMs != 0L) {
        FrameRateSamplePeriodMs = other.FrameRateSamplePeriodMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 17: {
            SessionSamplingFraction = input.ReadDouble();
            break;
          }
          case 24: {
            MaxBufferSizeKb = input.ReadInt32();
            break;
          }
          case 32: {
            BatchSize = input.ReadInt32();
            break;
          }
          case 40: {
            UpdateIntervalMs = input.ReadInt64();
            break;
          }
          case 48: {
            FrameRateSampleIntervalMs = input.ReadInt64();
            break;
          }
          case 56: {
            FrameRateSamplePeriodMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
