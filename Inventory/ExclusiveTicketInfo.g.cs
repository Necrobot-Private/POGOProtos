// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Inventory/ExclusiveTicketInfo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Inventory {

  /// <summary>Holder for reflection information generated from POGOProtos/Inventory/ExclusiveTicketInfo.proto</summary>
  public static partial class ExclusiveTicketInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Inventory/ExclusiveTicketInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExclusiveTicketInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5QT0dPUHJvdG9zL0ludmVudG9yeS9FeGNsdXNpdmVUaWNrZXRJbmZvLnBy",
            "b3RvEhRQT0dPUHJvdG9zLkludmVudG9yeSJ6ChNFeGNsdXNpdmVUaWNrZXRJ",
            "bmZvEhEKCXJhaWRfc2VlZBgBIAEoAxIPCgdmb3J0X2lkGAIgASgJEhMKC2Rl",
            "c2NyaXB0aW9uGAMgASgJEhUKDXN0YXJ0X3RpbWVfbXMYBCABKAMSEwoLZW5k",
            "X3RpbWVfbXMYBSABKANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Inventory.ExclusiveTicketInfo), global::POGOProtos.Inventory.ExclusiveTicketInfo.Parser, new[]{ "RaidSeed", "FortId", "Description", "StartTimeMs", "EndTimeMs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ExclusiveTicketInfo : pb::IMessage<ExclusiveTicketInfo> {
    private static readonly pb::MessageParser<ExclusiveTicketInfo> _parser = new pb::MessageParser<ExclusiveTicketInfo>(() => new ExclusiveTicketInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExclusiveTicketInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Inventory.ExclusiveTicketInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExclusiveTicketInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExclusiveTicketInfo(ExclusiveTicketInfo other) : this() {
      raidSeed_ = other.raidSeed_;
      fortId_ = other.fortId_;
      description_ = other.description_;
      startTimeMs_ = other.startTimeMs_;
      endTimeMs_ = other.endTimeMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExclusiveTicketInfo Clone() {
      return new ExclusiveTicketInfo(this);
    }

    /// <summary>Field number for the "raid_seed" field.</summary>
    public const int RaidSeedFieldNumber = 1;
    private long raidSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RaidSeed {
      get { return raidSeed_; }
      set {
        raidSeed_ = value;
      }
    }

    /// <summary>Field number for the "fort_id" field.</summary>
    public const int FortIdFieldNumber = 2;
    private string fortId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FortId {
      get { return fortId_; }
      set {
        fortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time_ms" field.</summary>
    public const int StartTimeMsFieldNumber = 4;
    private long startTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimeMs {
      get { return startTimeMs_; }
      set {
        startTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "end_time_ms" field.</summary>
    public const int EndTimeMsFieldNumber = 5;
    private long endTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTimeMs {
      get { return endTimeMs_; }
      set {
        endTimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExclusiveTicketInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExclusiveTicketInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RaidSeed != other.RaidSeed) return false;
      if (FortId != other.FortId) return false;
      if (Description != other.Description) return false;
      if (StartTimeMs != other.StartTimeMs) return false;
      if (EndTimeMs != other.EndTimeMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RaidSeed != 0L) hash ^= RaidSeed.GetHashCode();
      if (FortId.Length != 0) hash ^= FortId.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (StartTimeMs != 0L) hash ^= StartTimeMs.GetHashCode();
      if (EndTimeMs != 0L) hash ^= EndTimeMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RaidSeed != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RaidSeed);
      }
      if (FortId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FortId);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (StartTimeMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartTimeMs);
      }
      if (EndTimeMs != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EndTimeMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RaidSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RaidSeed);
      }
      if (FortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (StartTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeMs);
      }
      if (EndTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimeMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExclusiveTicketInfo other) {
      if (other == null) {
        return;
      }
      if (other.RaidSeed != 0L) {
        RaidSeed = other.RaidSeed;
      }
      if (other.FortId.Length != 0) {
        FortId = other.FortId;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.StartTimeMs != 0L) {
        StartTimeMs = other.StartTimeMs;
      }
      if (other.EndTimeMs != 0L) {
        EndTimeMs = other.EndTimeMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RaidSeed = input.ReadInt64();
            break;
          }
          case 18: {
            FortId = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            StartTimeMs = input.ReadInt64();
            break;
          }
          case 40: {
            EndTimeMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
